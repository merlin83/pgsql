
                Frequently Asked Questions (FAQ) for PostgreSQL
                                       
   Last updated: Fri Jun 4 23:30:19 EDT 1999
   
   Current maintainer: Bruce Momjian (maillist@candle.pha.pa.us)
   
   The most recent version of this document can be viewed at the
   postgreSQL Web site, http://postgreSQL.org.
   
   Linux-specific questions are answered in
   http://postgreSQL.org/docs/faq-linux.html.
   
   Irix-specific questions are answered in
   http://postgreSQL.org/docs/faq-irix.html.
     _________________________________________________________________
   
                             General questions
                                      
   1.1) What is PostgreSQL?
   1.2) What does PostgreSQL run on?
   1.3) Where can I get PostgreSQL?
   1.4) What's the copyright on PostgreSQL?
   1.5) Support for PostgreSQL
   1.6) Latest release of PostgreSQL
   1.7) Is there a commercial version of PostgreSQL?
   1.8) What documentation is available for PostgreSQL?
   1.9) What version of SQL does PostgreSQL use?
   1.10) Does PostgreSQL work with databases from earlier versions of
   PostgreSQL?
   1.11) Are there ODBC drivers for PostgreSQL?
   1.12) What tools are available for hooking PostgreSQL to Web pages?
   1.13) Does PostgreSQL have a graphical user interface? A report
   generator? A embedded query language interface?
   1.14) How can I learn SQL?
   1.15) What languages are available to communicate with PostgreSQL?
   
                    Installation/Configuration questions
                                      
   2.1) initdb doesn't run
   2.2) when I start up the postmaster, I get "FindBackend: could not
   find a backend to execute..." "postmaster: could not find backend to
   execute..."
   2.3) The system seems to be confused about commas, decimal points, and
   date formats.
   2.4) How do I install PostgreSQL somewhere other than
   /usr/local/pgsql?
   2.5) When I run postmaster, I get a Bad System Call core dumped
   message.
   2.6) When I try to start the postmaster, I get IpcMemoryCreate errors.
   2.7) I have changed a source file, but a recompile does not see the
   change?
   2.8) How do I prevent other hosts from accessing my PostgreSQL
   database?
   2.9) I can't access the database as the root user.
   2.10) All my servers crash under concurrent table access. Why?
   2.11) How do I tune the database engine for better performance?
   2.12) What debugging features are available in PostgreSQL?
   2.13) When I try to start the postmaster, I get IpcSemaphoreCreate
   errors. Why?
   2.14) I get 'Sorry, too many clients' when trying to connect. Why?
   2.15) What non-unix ports are available?
   
                           Operational questions
                                      
   3.1) Does PostgreSQL support nested subqueries?
   3.2) How can I write client applications for PostgreSQL?
   3.3) How do I set up a pg_group?
   3.4) What is the exact difference between binary cursors and normal
   cursors?
   3.5) What is an R-tree index and what is it used for?
   3.6) What is the maximum size for a row, table, database?
   3.7) My queries are slow or don't make use of the indexes. Why?
   3.8) How do I do regular expression searches? case-insensitive regexp
   searching?
   3.9) I experienced a server crash during a vacuum. How do I remove the
   lock file?
   3.10) What is the difference between the various character types?
   3.11) In a query, how do I detect if a field is NULL?
   3.12) How do I see how the query optimizer is evaluating my query?
   3.13) How do I create a serial/auto-incrementing field?
   3.14) What are the pg_psort.XXX files in my database directory?
   3.15) Why can't I connect to my database from another machine?
   3.16) How do I find out what indices or operations are defined in the
   database?
   3.17) What is an oid? What is a tid?
   3.18) What is the meaning of some of the terms used in PostgreSQL?
   3.19) What is Genetic Query Optimization?
   3.20) How do you remove a column from a table?
   3.21) How do I select only the first few rows of a query?
   3.22) How much database disk space is required to store data from a
   typical flat file?
   3.23) How do I get a list of tables, or other things I can see in
   psql?
   3.24) Why do I get the error "FATAL: palloc failure: memory
   exhausted?"
   3.25) How do I tell what PostgreSQL version I am running?
   
                    Questions about extending PostgreSQL
                                      
   4.1) I wrote a user-defined function and when I run it in psql, it
   dumps core.
   4.2) I get messages of the type NOTICE:PortalHeapMemoryFree:
   0x402251d0
   4.3) I've written some nifty new types and functions for PostgreSQL.
   4.4) How do I write a C function to return a tuple?
   
                                    Bugs
                                      
   5.1) How do I make a bug report?
     _________________________________________________________________
   
Section 1: General Questions

  1.1) What is PostgreSQL?
  
   PostgreSQL is an enhancement of the POSTGRES database management
   system, a next-generation DBMS research prototype. While PostgreSQL
   retains the powerful data model and rich data types of POSTGRES, it
   replaces the PostQuel query language with an extended subset of SQL.
   PostgreSQL is free and the complete source is available.
   
   PostgreSQL development is being performed by a team of Internet
   developers who all subscribe to the PostgreSQL development mailing
   list. The current coordinator is Marc G. Fournier
   (scrappy@postgreSQL.org). (See below on how to join). This team is now
   responsible for all current and future development of PostgreSQL.
   
   The authors of PostgreSQL 1.01 were Andrew Yu and Jolly Chen. Many
   others have contributed to the porting, testing, debugging and
   enhancement of the code. The original Postgres code, from which
   PostgreSQL is derived, was the effort of many graduate students,
   undergraduate students, and staff programmers working under the
   direction of Professor Michael Stonebraker at the University of
   California, Berkeley.
   
   The original name of the software at Berkeley was Postgres. When SQL
   functionality was added in 1995, its name was changed to Postgres95.
   The name was changed at the end of 1996 to PostgreSQL.
   
  1.2) What does PostgreSQL run on?
  
   The authors have compiled and tested PostgreSQL on the following
   platforms(some of these compiles require gcc 2.7.0):
     * aix - IBM on AIX 3.2.5 or 4.x
     * alpha - DEC Alpha AXP on Digital Unix 2.0, 3.2, 4.0
     * BSD44_derived - OSs derived from 4.4-lite BSD (NetBSD, FreeBSD)
     * bsdi - BSD/OS 2.x, 3.x, 4.x
     * dgux - DG/UX 5.4R4.11
     * hpux - HP PA-RISC on HP-UX 9.0, 10
     * i386_solaris - i386 Solaris
     * irix5 - SGI MIPS on IRIX 5.3
     * linux - Intel x86 on Linux 2.0 and Linux ELF SPARC on Linux ELF
       PPC on Linux Elf (For non-ELF Linux, see LINUX_ELF below).
     * sco - SCO 3.2v5
     * sparc_solaris - SUN SPARC on Solaris 2.4, 2.5, 2.5.1
     * sunos4 - SUN SPARC on SunOS 4.1.3
     * svr4 - Intel x86 on Intel SVR4 and MIPS
     * ultrix4 - DEC MIPS on Ultrix 4.4
       
  1.3) Where can I get PostgreSQL?
  
   The primary anonymous ftp site for PostgreSQL is:
     * ftp://ftp.postgreSQL.org/pub
       
   A mirror site exists at:
     * ftp://postgres95.vnet.net/pub/postgres95
     * ftp://ftp.luga.or.at/pub/postgres95
     * ftp://cal011111.student.utwente.nl/pub/postgres95
     * ftp://ftp.uni-trier.de/pub/database/rdbms/postgres/postgres95
     * ftp://rocker.sch.bme.hu
       
  1.4) What's the copyright on PostgreSQL?
  
   PostgreSQL is subject to the following COPYRIGHT.
   
   PostgreSQL Data Base Management System
   
   Copyright (c) 1994-6 Regents of the University of California
   
   Permission to use, copy, modify, and distribute this software and its
   documentation for any purpose, without fee, and without a written
   agreement is hereby granted, provided that the above copyright notice
   and this paragraph and the following two paragraphs appear in all
   copies.
   
   IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
   FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES,
   INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND
   ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN
   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   
   THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
   PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
   CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
   UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
   
  1.5) Support for PostgreSQL
  
   There is no official support for PostgreSQL from the University of
   California, Berkeley. It is maintained through volunteer effort.
   
   The main mailing list is: pgsql-general@postgreSQL.org. It is
   available for discussion of matters pertaining to PostgreSQL, For info
   on how to subscribe, send a mail with the lines in the body (not the
   subject line)

        subscribe
        end

   to pgsql-general-request@postgreSQL.org.
   
   There is also a digest list available. To subscribe to this list, send
   email to: pgsql-general-digest-request@postgreSQL.org with a BODY of:

        subscribe
        end

   Digests are sent out to members of this list whenever the main list
   has received around 30k of messages.
   
   The bugs mailing list available. To subscribe to this list, send email
   to bugs-request@postgreSQL.org with a BODY of:
   
   There is also a developers discussion mailing list available. To
   subscribe to this list, send email to hackers-request@postgreSQL.org
   with a BODY of:
   

        subscribe
        end

   Additional mailing lists and information about PostgreSQL can be found
   via the PostgreSQL WWW home page at:
   
     http://postgreSQL.org
     
   There also an IRC channel on EFNet, channel #PostgreSQL. I use the
   unix command irc -c '#PostgreSQL' "$USER" irc.phoenix.net
   
  1.6) Latest release of PostgreSQL
  
   The latest release of PostgreSQL is version 6.5.
   
   We plan to have major releases every four months.
   
  1.7) Is there a commercial version of PostgreSQL?
  
   Illustra Information Technology (a wholly owned subsidiary of Informix
   Software, Inc.) sells an object-relational DBMS called Illustra that
   was originally based on Postgres. For more information, contact
   sales@illustra.com
   
  1.8) What documentation is available for PostgreSQL?
  
   Several manuals, manual pages, and some small test examples are
   included in the distribution. See the /doc directory.
   
   psql has some nice \d commands to show information about types,
   operators, functions, aggregates, etc.
   
   The web page contains even more documentation.
   
  1.9) What version of SQL does PostgreSQL use?
  
   PostgreSQL supports an extended subset of SQL-92.
   
   It is Y2K compliant.
   
  1.10) Does PostgreSQL work with databases from earlier versions of
  PostgreSQL?
  
   Upgrading to 6.5 can not use the pg_upgrade utility. Those upgrading
   from earlier releases require a dump and restore.
   
   Those upgrading from versions earlier than 1.09 must upgrade to 1.09
   first without a dump/reload, then dump the data from 1.09, and then
   load it into 6.5.
   
  1.11) Are there ODBC drivers for PostgreSQL?
  
   There are two ODBC drivers available, PostODBC and OpenLink ODBC.
   
   PostODBC is included in the distribution. More information about it
   can be gotten from: http://www.insightdist.com/psqlodbc
   
   OpenLink ODBC can be gotten from http://www.openlinksw.com. It works
   with their standard ODBC client software so you'll have PostgreSQL
   ODBC available on every client platform they support (Win, Mac, Unix,
   VMS).
   
   They will probably be selling this product to people who need
   commercial-quality support, but a freeware version will always be
   available. Questions to postgres95@openlink.co.uk.
   
  1.12) What tools are available for hooking PostgreSQL to Web pages?
  
   A nice introduction to Database-backed Web pages can be seen at:
   http://www.webtools.com
   
   For web integration, PHP is an excellent interface. The URL for that
   is http://www.php.net
   
   PHP is great for simple stuff, but for more complex stuff, some still
   use the perl interface and CGI.pm.
   
   An WWW gateway based on WDB using perl can be downloaded from
   http://www.eol.ists.ca/~dunlop/wdb-p95
   
  1.13) Does PostgreSQL have a graphical user interface? A report generator? A
  embedded query language interface?
  
   We have a nice graphical user interface called pgaccess, which is
   shipped as part of the distribution. Pgaccess also has a report
   generator.
   
   The web page is http://www.flex.ro/pgaccess We also include ecpg,
   which is an embedded SQL query language interface for C.
   
  1.14) How can I learn SQL?
  
   There is a nice tutorial at http://w3.one.net/~jhoffman/sqltut.htm and
   at
   http://ourworld.compuserve.com/homepages/Graeme_Birchall/DB2_COOK.HTM.
   
   Many of our users like The Practical SQL Handbook, Bowman et al,
   Addison Wesley.
   
  1.15) What languages are available to communicate with PostgreSQL?
  
   We have:
     * C(interfaces/libpq)
     * C++(interfaces/libpq++)
     * Embedded C(interfaces/ecpg)
     * Java(interfaces/jdbc)
     * Perl(interfaces/perl5)
     * ODBC(interfaces/odbc)
     * Python(interfaces/python)
     * TCL(interfaces/libpgtcl)
     * A crude C/4GL(contrib/pginterface)
     _________________________________________________________________
   
Section 2: Installation Questions

  2.1) initdb doesn't run
  
     * check that you don't have any of the previous version's binaries
       in your path (If you see the message WARN:heap_modifytuple: repl
       is \ 9, this is the problem.)
     * check to see that you have the proper paths set
     * check that the postgres user owns the proper files
       
  2.2) when I start up the postmaster, I get "FindBackend: could not find a
  backend to execute..." "postmaster: could not find backend to execute..."
  
   You probably do not have the right path set up. The postgres
   executable needs to be in your path.
   
  2.3) The system seems to be confused about commas, decimal points, and date
  formats.
  
   Check your locale configuration. PostgreSQL uses the locale settings
   of the user that ran the postmaster process. There are postgres and
   psql SET commands to control the date format. Set those accordingly
   for your operating environment.
   
  2.4) How do I install PostgreSQL somewhere other than /usr/local/pgsql?
  
   You need to edit Makefile.global and change POSTGRESDIR accordingly,
   or create a Makefile.custom and define POSTGRESDIR there.
   
  2.5) When I run postmaster, I get a Bad System Call core dumped message.
  
   It could be a variety of problems, but first check to see that you
   have system V extensions installed on your kernel. PostgreSQL requires
   kernel support for shared memory and semaphores.
   
  2.6) When I try to start the postmaster, I get IpcMemoryCreate errors.
  
   You either do not have shared memory configured properly in kernel or
   you need to enlarge the shared memory available in the kernel. The
   exact amount you need depends on your architecture and how many
   buffers and backend processes you configure postmaster to run with.
   For most systems, with default numbers of buffers and processes, you
   need a minimum of ~1MB.
   
  2.7) I have changed a source file, but a recompile does not see the change?
  
   The Makefiles do not have the proper dependencies for include files.
   You have to do a make clean and then another make.
   
  2.8) How do I prevent other hosts from accessing my PostgreSQL database?
  
   By default, PostgreSQL only allows connections from the local machine
   using unix domain sockets. You must add the -i flag to the postmaster,
   and enable host-based authentication by modifying the file
   $PGDATA/pg_hba accordingly.
   
  2.9) I can't access the database as the root user.
  
   You should not create database users with user id 0(root). They will
   be unable to access the database. This is a security precaution
   because of the ability of any user to dynamically link object modules
   into the database engine.
   
  2.10) All my servers crash under concurrent table access. Why?
  
   This problem can be caused by a kernel that is not configured to
   support semaphores.
   
  2.11) How do I tune the database engine for better performance?
  
   Certainly, indices can speed up queries. The explain command allows
   you to see how PostgreSQL is interpreting your query, and which
   indices are being used.
   
   If you are doing a lot of inserts, consider doing them in a large
   batch using the copy command. This is much faster than single
   individual inserts. Second, statements not in a begin work/commit
   transaction block are considered to be in their own transaction.
   Consider performing several statements in a single transaction block.
   This reduces the transaction overhead. Also consider dropping and
   recreating indices when making large data changes.
   
   There are several tuning things that can be done. You can disable
   fsync() by starting the postmaster with a -o -F option. This will
   prevent fsync()'s from flushing to disk after every transaction.
   
   You can also use the postmaster -B option to increase the number of
   shared memory buffers used by the backend processes. If you make this
   parameter too high, the backends will not start or crash unexpectedly.
   Each buffer is 8K and the default is 64 buffers.
   
   You can also use the postgres -S option to increase the maximum amount
   of memory used by each backend process for temporary sorts. Each
   buffer is 1K and the default is 512 buffers.
   
   You can also use the cluster command to group data in base tables to
   match an index. See the cluster(l) manual page for more details.
   
  2.12) What debugging features are available in PostgreSQL?
  
   PostgreSQL has several features that report status information that
   can be valuable for debugging purposes.
   
   First, by running configure with the -enable-cassert option, many
   assert()'s monitor the progress of the backend and halt the program
   when something unexpected occurs.
   
   Both postmaster and postgres have several debug options available.
   First, whenever you start the postmaster, make sure you send the
   standard output and error to a log file, like:

        cd /usr/local/pgsql
        ./bin/postmaster >server.log 2>&1 &

   This will put a server.log file in the top-level PostgreSQL directory.
   This file contains useful information about problems or errors
   encountered by the server. Postmaster has a -d option that allows even
   more detailed information to be reported. The -d option takes a number
   that specifies the debug level. Be warned that high debug level values
   generates large log files.
   
   You can actually run the postgres backend from the command line, and
   type your SQL statement directly. This is recommended only for
   debugging purposes. Note that a newline terminates the query, not a
   semicolon. If you have compiled with debugging symbols, you can use a
   debugger to see what is happening. Because the backend was not started
   from the postmaster, it is not running in an identical environment and
   locking/backend interaction problems may not be duplicated. Some
   operating system can attach to a running backend directly to diagnose
   problems.
   
   The postgres program has a -s, -A, -t options that can be very useful
   for debugging and performance measurements.
   
   You can also compile with profiling to see what functions are taking
   execution time. The backend profile files will be deposited in the
   pgsql/data/base/dbname directory. The client profile file will be put
   in the current directory.
   
  2.13) When I try to start the postmaster, I get IpcSemaphoreCreate errors.
  Why?
  
   If the error message is IpcSemaphoreCreate: semget failed (No space
   left on device) then your kernel is not configured with enough
   semaphores. Postgres needs one semaphore per potential backend
   process. A temporary solution is to start the postmaster with a
   smaller limit on the number of backend processes. Use -N with a
   parameter less than the default of 32. A more permanent solution is to
   increase your kernel's SEMMNS and SEMMNI parameters.
   
   If the error message is something else, you might not have semaphore
   support configured in your kernel at all.
   
  2.14) I get 'Sorry, too many clients' when trying to connect. Why?
  
   You need to increase the postmaster's limit on how many concurrent
   backend processes it can start.
   
   In Postgres 6.5, the default limit is 32 processes. You can increase
   it by restarting the postmaster with a suitable -N value. With the
   default configuration you can set -N as large as 1024; if you need
   more, increase MAXBACKENDS in include/config.h and rebuild. You can
   set the default value of -N at configuration time, if you like, using
   configure's --with-maxbackends switch.
   
   Note that if you make -N larger than 32, you should consider
   increasing -B beyond its default of 64. For large numbers of backend
   processes, you are also likely to find that you need to increase
   various Unix kernel configuration parameters. Things to check include
   the maximum size of shared memory blocks, SHMMAX, the maximum number
   of semaphores, SEMMNS and SEMMNI, the maximum number of processes,
   NPROC, the maximum number of processes per user, MAXUPRC, and the
   maximum number of open files, NFILE and NINODE. The reason that
   Postgres has a limit on the number of allowed backend processes is so
   that you can ensure that your system won't run out of resources.
   
   In Postgres versions prior to 6.5, the maximum number of backends was
   64, and changing it required a rebuild after altering the MaxBackendId
   constant in include/storage/sinvaladt.h.
   
  2.15) What non-unix ports are available?
  
   It is possible to compile the libpq C library, psql, and other
   interfaces and binaries to run on MS Windows platforms. In this case,
   the client is running on MS Windows, and communicates via TCP/IP to a
   server running on one of our supported Unix platforms.
   
   A file win32.mak is included in the distribution for making a Win32
   libpq library and psql.
   
   The database server is now working on Windows NT using the Cygnus
   Unix/NT porting library. The only feature missing is dynamic loading
   of user-defined functions/types. See
   http://www.askesis.nl/AskesisPostgresIndex.html for more information.
   
   There is another port using U/Win at
   http://surya.wipro.com/uwin/ported.html.
     _________________________________________________________________
   
Section 3: PostgreSQL Features

  3.1) Does PostgreSQL support nested subqueries?
  
   Yes, fully supported, but only in the where clause, not in the target
   list.
   
  3.2) How can I write client applications for PostgreSQL?
  
   PostgreSQL supports a C-callable library interface called libpq as
   well as many others. See the above list of supported languages.
   
  3.3) How do I set up a pg_group?
  
   Currently, there is no easy interface to set up user groups. You have
   to explicitly insert/update the pg_group table. For example:

        jolly=> insert into pg_group (groname, grosysid, grolist)
        jolly=>     values ('posthackers', '1234', '{5443, 8261}');
        INSERT 548224
        jolly=> grant insert on foo to group posthackers;
        CHANGE
        jolly=>

   The fields in pg_group are:
     * groname: the group name. This a name and should be purely
       alphanumeric. Do not include underscores or other punctuation.
     * grosysid: the group id. This is an int4. This should be unique for
       each group.
     * grolist: the list of pg_user id's that belong in the group. This
       is an int4[].
       
  3.4) What is the exact difference between binary cursors and normal cursors?
  
   See the declare manual page for a description.
   
  3.5) What is an R-tree index and what is it used for?
  
   An r-tree index is used for indexing spatial data. A hash index can't
   handle range searches. A B-tree index only handles range searches in a
   single dimension. R-tree's can handle multi-dimensional data. For
   example, if an R-tree index can be built on an attribute of type
   point, the system can more efficient answer queries like select all
   points within a bounding rectangle.
   
   The canonical paper that describes the original R-Tree design is:
   
   Guttman, A. "R-Trees: A Dynamic Index Structure for Spatial
   Searching." Proc of the 1984 ACM SIGMOD Int'l Conf on Mgmt of Data,
   45-57.
   
   You can also find this paper in Stonebraker's "Readings in Database
   Systems"
   
   Builtin R-Trees can handle polygons and boxes. In theory, R-trees can
   be extended to handle higher number of dimensions. In practice,
   extending R-trees require a bit of work and we don't currently have
   any documentation on how to do it.
   
  3.6) What is the maximum size for a row, table, database?
  
   Rows are limited to 8K bytes. Taking into account system attributes
   and other overhead, one should stay well shy of 8,000 bytes to be on
   the safe side. To use attributes larger than 8K, try using the large
   objects interface.
   
   Rows do not cross 8k boundaries so a 5k row will require 8k of
   storage.
   
   Table and database sizes are unlimited. There are many databases that
   are tens of gigabytes, and probably some that are hundreds of
   gigabytes.
   
  3.7) My queries are slow or don't make use of the indexes. Why?
  
   PostgreSQL does not automatically maintain statistics. One has to make
   an explicit vacuum call to update the statistics. After statistics are
   updated, the optimizer knows how many rows in the table, and can
   better decide if it should use indices. Note that the optimizer does
   not use indices in cases when the table is small because a sequential
   scan would be faster.
   
   For column-specific optimization statistics, use vacuum analyze.
   Vacuum analyze is important for complex multi-join queries, so the
   optimizer can estimate the number of rows returned from each table,
   and choose the proper join order. The backend does not keep track of
   column statistics on its own, and vacuum analyze must be run to
   collect them periodically.
   
   Indexes are not used for order by operations.
   
   When using wild-card operators like LIKE or ~, indices can only be
   used if the beginning of the search is anchored to the start of the
   string. So, to use indices, LIKE searches can should not begin with %,
   and ~(regular expression searches) should start with ^.
   
  3.8) How do I do regular expression searches? case-insensitive regexp
  searching?
  
   See psql's \do command.
   
  3.9) I experienced a server crash during a vacuum. How do I remove the lock
  file?
  
   See the vacuum manual page.
   
  3.10) What is the difference between the various character types?
  
Type            Internal Name   Notes
--------------------------------------------------
CHAR            char            1 character
CHAR(#)         bpchar          blank padded to the specified fixed length
VARCHAR(#)      varchar         size specifies maximum length, no padding
TEXT            text            length limited only by maximum row length
BYTEA           bytea           variable-length array of bytes

   You need to use the internal name when doing internal operations.
   
   The last four types above are "varlena" types (i.e. the first four
   bytes are the length, followed by the data). char(#) allocates the
   maximum number of bytes no matter how much data is stored in the
   field. text, varchar(#), and bytea all have variable length on the
   disk, and because of this, there is a small performance penalty for
   using them. Specifically, the penalty is for access to all columns
   after the first column of this type.
   
  3.11) In a query, how do I detect if a field is NULL?
  
   You test the column with IS NULL and IS NOT NULL.
   
  3.12) How do I see how the query optimizer is evaluating my query?
  
   See the explain manual page.
   
  3.13) How do I create a serial/auto-incrementing field?
  
   PostgreSQL supports a serial data type. It auto-creates a sequence and
   index on the column. See the create_sequence manual page for more
   information about sequences. You can also use each row's oid field as
   a unique value. However, if you need to dump and reload the database,
   you need to use pgdump's -o option or copy with oids option to
   preserve the oids.
   
  3.14) What are the pg_psort.XXX files in my database directory?
  
   They are temporary sort files generated by the query executor. For
   example, if a sort needs to be done to satisfy an order by, some temp
   files are generated as a result of the sort.
   
   If you have no transactions or sorts running at the time, it is safe
   to delete the pg_psort.XXX files.
   
  3.15) Why can't I connect to my database from another machine?
  
   The default configuration allows only unix domain socket connections
   from the local machine. To enable TCP/IP connections, use the
   postmaster -i option You need to add a host entry to the file
   pgsql/data/pg_hba. See the pg_hba.conf manual page.
   
  3.16) How do I find out what indices or operations are defined in the
  database?
  
   psql has a variety of backslash commands to show such information. Use
   \? to see them.
   
   Also try the file pgsql/src/tutorial/syscat.source. It illustrates
   many of the selects needed to get information out of the database
   system tables.
   
  3.17) What is an oid? What is a tid?
  
   Oids are PostgreSQL's answer to unique row ids. Every row that is
   created in PostgreSQL gets a unique oid. All oids generated during
   initdb are less than 16384 (from backend/access/transam.h). All
   user-created oids are equal or greater that this. By default, all
   these oids are unique not only within a table, or database, but unique
   within the entire PostgreSQL installation.
   
   PostgreSQL uses oids in its internal system tables to link rows
   between tables. These oids can be used to identify specific user rows
   and used in joins. It is recommended you use column type oid to store
   oid values. See the sql(l) manual page to see the other internal
   columns. You can create an index on the oid field for faster access.
   
   Oids are assigned to all new rows from a central area that is used by
   all databases. If you want to change the oid to something else, or if
   you want to make a copy of the table, with the original oid's, there
   is no reason you can't do it:
        CREATE TABLE new_table(old_oid oid, mycol int);
        SELECT INTO new SELECT old_oid, mycol FROM old;
        COPY new TO '/tmp/pgtable';
        DELETE FROM new;
        COPY new WITH OIDS FROM '/tmp/pgtable';

   Tids are used to identify specific physical rows with block and offset
   values. Tids change after rows are modified or reloaded. They are used
   by index entries to point to physical rows.
   
  3.18) What is the meaning of some of the terms used in PostgreSQL?
  
   Some of the source code and older documentation use terms that have
   more common usage. Here are some:
     * row, record, tuple
     * attribute, field, column
     * table, class
     * retrieve, select
     * replace, update
     * append, insert
     * oid, serial value
     * portal, cursor
     * range variable, table name, table alias
       
  3.19) What is Genetic Query Optimization?
  
   The GEQO module in PostgreSQL is intended to solve the query
   optimization problem of joining many tables by means of a Genetic
   Algorithm (GA). It allows the handling of large join queries through
   non-exhaustive search.
   
   For further information see README.GEQO <utesch@aut.tu-freiberg.de>.
   
  3.20) How do you remove a column from a table?
  
   We do not support alter table drop column, but do this:

        SELECT ...  -- select all columns but the one you want to remove
        INTO TABLE new_table
        FROM old_table;
        DROP TABLE old_table;
        ALTER TABLE new_table RENAME TO old_table;

  3.21) How do I select only the first few rows of a query?
  
   See the fetch manual page.
   
   This only prevents all row results from being transfered to the
   client. The entire query must be evaluated, even if you only want just
   the first few rows. Consider a query that has an order by. There is no
   way to return any rows until the entire query is evaluated and sorted.
   
  3.22)How much database disk space is required to store data from a typical
  flat file?
  
   Consider a file with 300,000 lines with two integers on each line. The
   flat file is 2.4MB. The size of the PostgreSQL database file
   containing this data can be estimated:
40 bytes + each row header (approximate)
 8 bytes + two int fields @ 4 bytes each
 4 bytes + pointer on page to tuple
-------- =
52 bytes per row

The data page size in PostgreSQL is 8192(8k) bytes, so:

8192 bytes per page
-------------------  =  157 rows per database page (rounded up)
 52 bytes per row

300000 data rows
-----------------  =   1911 database pages
157 rows per page

1911 database pages * 8192 bytes per page  =  15,654,912 or 15.5MB


Indexes do not contain as much overhead, but do contain the data that is
being indexed, so they can be large also.

  3.23) How do I get a list of tables, or other things I can see in psql?
  
   See the file pgsql/src/bin/psql/psql.c. It contains SQL commands that
   generate the output for psql's backslash commands.
   
  3.24) Why do I get the error "FATAL: palloc failure: memory exhausted?"
  
   It is possible you have run out of virtual memory on your system, or
   your kernel has a low limit for certain resources. Try this before
   starting the postmaster:

        ulimit -d 65536
        limit datasize 64m

   Depending on your shell, only one of these may succeed, but it will
   set your process data segment limit much higher and perhaps allow the
   query to complete. This command applies to the current process, and
   all subprocesses created after the command is run. If are having a
   problem with the SQL client because the backend is returning too much
   data, try it before starting the client.
   
  3.25) How do I tell what PostgreSQL version I am running?
  
   From psql, type select version();
     _________________________________________________________________
   
Section 4: Extending PostgreSQL

  4.1) I wrote a user-defined function and when I run it in psql, it dumps
  core.
  
   The problem could be a number of things. Try testing your user-defined
   function in a stand alone test program first. Also, make sure you are
   not sending elog NOTICES when the front-end is expecting data, such as
   during a type_in() or type_out() functions
   
  4.2) I get messages of the type NOTICE:PortalHeapMemoryFree: 0x402251d0 not
  in alloc set!
  
   You are pfree'ing something that was not palloc'ed. Beware of mixing
   malloc/free and palloc/pfree.
   
  4.3) I've written some nifty new types and functions for PostgreSQL.
  
   Please share them with other PostgreSQL users. Send your extensions to
   mailing list, and they will eventually end up in the contrib/
   subdirectory.
   
  4.4) How do I write a C function to return a tuple?
  
   This requires extreme wizardry so extreme that the authors have not
   ever tried it, though in principle it can be done.
     _________________________________________________________________
   
Section 5: Bugs

  5.1) How do I make a bug report?
  
   Check the current FAQ at http://postgreSQL.org
   
   Also check out our ftp site ftp://ftp.postgreSQL.org/pub to see if
   there is a more recent PostgreSQL version or patches.
   
   You can also fill out the "bug-template" file and send it to:
   bugs@postgreSQL.org
