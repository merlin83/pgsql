<!-- $Header: /home/rubik/work/pgcvs/CVSROOT/pgsql/doc/src/sgml/installation.sgml,v 1.21 2000-09-29 20:21:34 petere Exp $ -->

<chapter id="installation">
 <title><![%flattext-install-include[<productname>PostgreSQL</> ]]>Installation Instructions</title>

 <sect1 id="install-short">
  <title>Short Version</title>

  <para>
<programlisting>
./configure
gmake
gmake install
adduser postgres
su - postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/postmaster -D /usr/local/pgsql/data &gt;logfile 2&gt;&amp;1 &amp;
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test
</programlisting>
   The long version is the rest of this
   <![%flattext-install-include;[document.]]>
   <![%flattext-install-ignore;[chapter.]]>
  </para>
 </sect1>


 <sect1 id="install-requirements">
  <title>Requirements</title>

  <para>
   In general, a modern Unix-compatible platform should be able to run
   PostgreSQL. The platforms that had received explicit testing at the
   time of release are listed in <xref linkend="supported-platforms">
   below. In the <filename>doc</> subdirectory of the distribution
   there are several platform-specific <acronym>FAQ</> documents you
   might wish to consult if you are having trouble.
  </para>

  <para>
   The following prerequisites exist for building <productname>PostgreSQL</>:
   <itemizedlist>
    <listitem>
     <para>
      <acronym>GNU</> <application>make</> is required; other
      <application>make</> programs will <emphasis>not</> work.
      <acronym>GNU</> <application>make</> is often installed under
      the name <filename>gmake</filename>; this document will always
      refer to it by that name. (On GNU/Linux systems GNU make is the
      default tool with the name <filename>make</>.) To test for
      <acronym>GNU</acronym> <application>make</application> enter
<screen>
<userinput>gmake --version</userinput>
</screen>
      If at all possible you should use version 3.76.1 or later.
     </para>
    </listitem>

    <listitem>
     <para>
      You need an <acronym>ISO</>/<acronym>ANSI</> C compiler. Recent
      versions of <productname>GCC</> are recommendable, but
      <productname>PostgreSQL</> is known to build with a wide variety
      of compilers from different vendors.
     </para>
    </listitem>

    <listitem>
     <para><application>gzip</></para>
    </listitem>

    <listitem>
     <para>
      The <acronym>GNU</> <productname>Readline</> library for comfortable
      line editing and command history retrieval will automatically be used
      if found. You might wish to install it before proceeding, but it is not
      required.
     </para>
    </listitem>

    <listitem>
     <para>
      <application>Flex</> and <application>Bison</> are
      <emphasis>not</> required when building from a released source
      package because the output files are pre-generated. You will
      need these programs only when building from a CVS tree or when
      the actual scanner and parser definition files were changed. If
      you need them, be sure to get <application>Flex</> 2.5.4 or
      later and <application>Bison</> 1.28 or later. Other yacc
      programs can sometimes be used, but doing so requires extra
      efforts and is not recommended. Other lex programs will
      definitely not work.
     </para>
    </listitem>

    <listitem>
     <para>
      To build on <productname>Windows NT</> or <productname>Windows
      2000</> you need the <productname>Cygwin</> and
      <productname>cygipc</> packages. See the file
      <filename>doc/INSTALL_WIN</> for details.
     </para>
    </listitem>
   </itemizedlist>
  </para>
 
  <para>
   If you need to get a <acronym>GNU</acronym> package, you can find
   it at your local <acronym>GNU</acronym> mirror site (see <ulink
   url="http://www.gnu.org/order/ftp.html">http://www.gnu.org/order/ftp.html</>
   for a list) or at <ulink
   url="ftp://ftp.gnu.org/gnu/">ftp://ftp.gnu.org/gnu/</ulink>.
  </para>

  <para>
   Also check that you have sufficient disk space. You will need about
   30 MB for the source tree during compilation and about 5 MB for the
   installation directory. An empty database takes about 1 MB, later
   it takes about five times the amount of space that a flat text file
   with the same data would take. If you are going to run the
   regression tests you will temporarily need an extra 20 MB. Use the
   <command>df</command> command to check for disk space.
  </para>
 </sect1>

<![%flattext-install-ignore;[
 <sect1 id="install-getsource">
  <title>Getting The Source</title>

  <para>
   The <productname>PostgreSQL</> &version; sources can by obtained from <ulink
   url="ftp://ftp.postgresql.org/pub/postgresql-&version;.tar.gz"
   >ftp://ftp.postgresql.org/pub/postgresql-&version;.tar.gz</ulink>.
   Use a mirror if possible. Then unpack it:
<screen>
<userinput>gunzip postgresql-&version;.tar.gz</userinput>
<userinput>tar xf postgresql-&version;.tar</userinput>
</screen>
   This will create a directory
   <filename>postgresql-&version;</filename> with the <productname>PostgreSQL</> sources
   in the current directory. Change into that directory for the rest
   of the installation procedure.
  </para>
 </sect1>
]]>

 <sect1 id="install-upgrading">
  <title>If You Are Upgrading</title>

  <para>
   The internal data storage format changes with new releases of
   <productname>PostgreSQL</>. Therefore, if you are upgrading an existing installation
   that does not have a version number
   <quote>&majorversion;.x</quote>, you must back up and restore your
   data as shown here. These instructions assume that your existing
   installation is under the <filename>/usr/local/pgsql</> directory,
   and that the data area is in <filename>/usr/local/pgsql/data</>.
   Substitute your paths appropriately.
  </para>

  <procedure>
   <step>
    <para>
     Make sure that your database is not updated during or after the
     backup. This does not affect the integrity of the backup, but the
     changed data would of course not be included. If necessary, edit
     the permissions in the file
     <filename>/usr/local/pgsql/data/pg_hba.conf</> (or equivalent) to
     disallow access from everyone except you.
    </para>
   </step>

   <step>
    <para>
     To dump your database installation, type:
<screen>
<userinput>pg_dumpall &gt; <replaceable>outputfile</></userinput>
</screen>
     If you need to preserve the oids (such as when using them as
     foreign keys), then use the -o option when running
     <application>pg_dumpall</>.
    </para>

    <para>
     Make sure that you use the <application>pg_dumpall</> command
     from the version you are currently running. &version;'s
     <application>pg_dumpall</> should not be used on older databases.
    </para>
   </step>

   <step>
    <para>
     If you are installing the new version at the same location as the
     old one then shut down the old server, at the latest before you
     install the new files:
<screen>
<userinput>kill -INT `cat /usr/local/pgsql/data/postmaster.pid`</>
</screen>
     Versions prior to 7.0 do not have this
     <filename>postmaster.pid</> file. If you are using such a version
     you must find out the process id of the server yourself, for
     example by typing <userinput>ps ax | grep postmaster</>, and
     supply it to the <command>kill</> command.
    </para>

    <para>
     On systems which have <productname>PostgreSQL</> started at boot time, there is
     probably a start-up file that will accomplish the same thing. For
     example, on a Redhat Linux system one might find that
<programlisting>
/etc/rc.d/init.d/postgres.init stop
</programlisting>
     works.
    </para>
   </step>

   <step>
    <para>
     If you are installing in the same place as the old version then
     it is also a good idea to move the old installation out of the
     way, in case you still need it later on. Use a command like this:
<screen>
<userinput>mv /usr/local/pgsql /usr/local/pgsql.old</>
</screen>
    </para>
   </step>
  </procedure>

  <para>
   After you have installed <productname>PostgreSQL</> &version;, create a new database
   directory and start the new server. Remember that you must execute
   these commands while logged in to the special database user account
   (which you already have if you are upgrading).
<programlisting>
<userinput>/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/bin</>
<userinput>/usr/local/pgsql/bin/postmaster -D /usr/local/pgsql/bin</>
</programlisting>
   Finally, restore your data with
<screen>
<userinput>/usr/local/pgsql/bin/psql -d template1 -f <replaceable>outputfile</></userinput>
</screen>
   using the <emphasis>new</> <application>psql</>.
  </para>

  <para>
   You can also install the new version in parallel with the old one
   to decrease the downtime. These topics are discussed at length in
   <![%flattext-install-include[the <citetitle>Administrator's Guide</>,]]>
   <![%flattext-install-ignore[<xref linkend="migration">,]]>
   which you are encouraged
   to read in any case. The <application>pg_upgrade</> utility can
   also often be used.
  </para>
 </sect1>


 <sect1 id="install-procedure">
  <title>Installation Procedure</title>

  <procedure>

  <step id="configure">
   <title>Configuration</>
   <para>
    The first step of the installation procedure is to configure the
    source tree for your system and choose the options you would like.
    This is done by running the <filename>configure</> script. For a
    default installation simply type
<screen>
<userinput>./configure</userinput>
</screen>
    This script will run a number of tests to guess values for various
    system dependent variables and detect some quirks of your
    operating system, and finally creates several files in the build
    tree to record what it found.
   </para>

   <para>
    The default configuration will build the server and utilities, as
    well as all client applications and interfaces that only require a
    C compiler. All files will be installed under
    <filename>/usr/local/pgsql</> by default.
   </para>

   <para>
    You can customize the build and installation process by giving one
    or more of the following command line options to
    <filename>configure</filename>:

     <variablelist>
      <varlistentry>
       <term>--prefix=<replaceable>PREFIX</></term>
       <listitem>
        <para>
         Install all files under the directory <replaceable>PREFIX</>
         instead of <filename>/usr/local/pgsql</filename>. The actual
         files will be installed into various subdirectories; no files
         will ever be installed directly into the
         <replaceable>PREFIX</> directory.
        </para>

        <para>
         If you have special needs, you can also customize the
         individual subdirectories with the following options.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--exec-prefix=<replaceable>EXEC-PREFIX</></term>
       <listitem>
        <para>
         You can install architecture-dependent files under a
         different prefix, <replaceable>EXEC-PREFIX</>, than what
         <replaceable>PREFIX</> was set to. This can be useful to
         share architecture-independent files between hosts. If you
         omit this, then <replaceable>EXEC-PREFIX</> is set equal to
         <replaceable>PREFIX</> and both architecture dependent and
         independent files will be installed under the same tree,
         which is probably what you want.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--bindir=<replaceable>DIRECTORY</></term>
       <listitem>
        <para>
         Specifies the directory for executable programs. The default
         is <filename><replaceable>EXEC-PREFIX</>/bin</>, which
         normally means <filename>/usr/local/pgsql/bin</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--datadir=<replaceable>DIRECTORY</></term>
       <listitem>
        <para>
         Sets the directory for read-only data files used by the
         installed programs. The default is
         <filename><replaceable>PREFIX</>/share</>. Note that this has
         nothing to do with where your database files will be placed.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--sysconfdir=<replaceable>DIRECTORY</></term>
       <listitem>
        <para>
         The directory for various configuration files,
         <filename><replaceable>PREFIX</>/etc</> by default.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--libdir=<replaceable>DIRECTORY</></term>
       <listitem>
        <para>
         The location to install libraries and dynamically loadable
         modules. The default is
         <filename><replaceable>EXEC-PREFIX</>/lib</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--includedir=<replaceable>DIRECTORY</></term>
       <listitem>
        <para>
         The directory for installing C and C++ header files. The
         default is <filename><replaceable>PREFIX</>/include</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--docdir=<replaceable>DIRECTORY</></term>
       <listitem>
        <para>
         Documentation files, except <quote>man</> pages, will be
         installed into this directory. The default is
         <filename><replaceable>PREFIX</>/doc</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--mandir=<replaceable>DIRECTORY</></term>
       <listitem>
        <para>
         The man pages that come with <productname>PostgreSQL</> will be installed under
         this directory, in their respective
         <filename>man<replaceable>x</></> subdirectories.
         The default is <filename><replaceable>PREFIX</>/man</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--with-includes=<replaceable>DIRECTORIES</></term>
       <listitem>
        <para>
         <replaceable>DIRECTORIES</> is a colon-separated list of
         directories that will be added to the list the compiler
         searches for header files. If you have optional packages
         (such as GNU Readline) installed in a non-standard location
         you have to use this option and probably the corresponding
         <option>--with-libraries</> option.
        </para>
        <para>
         Example: <literal>--with-includes=/opt/gnu/include:/usr/sup/include</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--with-libraries=<replaceable>DIRECTORIES</></term>
       <listitem>
        <para>
         <replaceable>DIRECTORIES</> is a colon-separated list of
         directories to search for libraries. You will probably have
         to use this option (and the corresponding
         <option>--with-includes</> option) if you have packages
         installed in non-standard locations.
        </para>
        <para>
         Example: <literal>--with-libraries=/opt/gnu/lib:/usr/sup/lib</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--enable-locale</term>
       <listitem>
        <para>
         Enables locale support. There is a performance penalty
         associated with locale support, but if you are not in an
         English-speaking environment you will most likely need this.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--enable-recode</term>
       <listitem>
        <para>
         Enables character set recode support. See
         <filename>doc/README.Charsets</> for details on this feature.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--enable-multibyte</term>
       <listitem>
        <para>
         Allows the use of multibyte character encodings. This is
         primarily for languages like Japanese, Korean, and Chinese.
         Read <filename>doc/README.mb</> for details.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--with-pgport=<replaceable>NUMBER</></term>
       <listitem>
        <para>
         Set <replaceable>NUMBER</> as the default port number for
         server and clients. The default is 5432. The port can always
         be changed later on, but if you specify it here then both
         server and clients will have the same default compiled in,
         which can be very convenient.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--with-CXX</term>
       <listitem>
        <para>
         Build the C++ interface library. <filename>configure</> will
         automatically pick the C++ compiler that goes with the C
         compiler you are using. It is not recommended or supported to
         use C and C++ compilers of different origin in the same
         build.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--with-perl</term>
       <listitem>
        <para>
         Build the Perl interface module. The Perl interface
         will be installed at the usual place for Perl modules
         (typically under <filename>/usr/lib/perl</filename>), so you
         must have root access to perform the installation step (see
         <xref linkend="install">). You need to have Perl 5 installed to
         use this option.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--with-python</term>
       <listitem>
        <para>
         Build the Python interface module. You need to have root
         access to be able to install the Python module at its default
         place
         (<filename>/usr/lib/python<replaceable>x</>.<replaceable>y</></>).
         To be able to use this option, you must have Python installed
         and your system needs to support shared libraries. If you
         instead want to build a new complete interpreter binary, you
         will have to do it manually.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--with-tcl</term>
       <listitem>
        <para>
         Builds components that require Tcl/Tk, which are libpgtcl,
         pgtclsh, pgtksh, pgaccess, and PL/Tcl.  But see below about
         <option>--without-tk</>.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--without-tk</term>
       <listitem>
        <para>
         If you specify <option>--with-tcl</> and this option, then
         programs that require <productname>Tk</> (i.e., pgtksh and pgaccess)
         will be excluded.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--with-tclconfig=<replaceable>DIRECTORY</replaceable></term>
       <term>--with-tkconfig=<replaceable>DIRECTORY</replaceable></term>
       <listitem>
        <para>
         Tcl/Tk installs the files <filename>tclConfig.sh</filename> and
         <filename>tkConfig.sh</filename> which contain certain
         configuration information that is needed to build modules
         interfacing to Tcl or Tk. These files are normally found
         automatically at their well-known location, but if you want to
         use a different version of Tcl or Tk you can specify the
         directory where to find them.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--enable-odbc</term>
       <listitem>
        <para>
         Build the ODBC driver package.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--with-odbcinst=<replaceable>DIRECTORY</></term>
       <listitem>
        <para>
         Specifies the directory where the ODBC driver will expect its
         <filename>odbcinst.ini</> configuration file. The default is
         <filename>/usr/local/pgsql/etc</filename> or whatever you
         specified as <option>--sysconfdir</option>. A default file
         will be installed there. If you intend to share the
         <filename>odbcinst.ini</> file between several ODBC drivers
         then you may want to use this option.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--with-krb4=<replaceable>DIRECTORY</></term>
       <term>--with-krb5=<replaceable>DIRECTORY</></term>
       <listitem>
        <para>
         Build with suppport for Kerberos authentication. You can use
         either Kerberos version 4 or 5, but not both. The
         <replaceable>DIRECTORY</> argument specifies the root
         directory of the Kerberos installation;
         <filename>/usr/athena</> is assumed as default. If the
         relevant headers files and libraries are not under a common
         parent directory, then you must use the
         <option>--with-includes</> and <option>--with-libraries</>
         options in addition to this option. If, on the other hand,
         the required files are in a location that is searched by
         default (e.g., <filename>/usr/lib</>), then you can leave off
         the argument.
        </para>

        <para>
         <filename>configure</> will check for the required header
         files and libraries to make sure that your Kerberos
         installation is sufficient before proceeding.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--with-krb-srvnam=<replaceable>NAME</></term>
       <listitem>
        <para>
         The name of the Kerberos service principal.
         <quote>postgres</quote> is the default. There's probably no
         reason to change this.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--with-openssl=<replaceable>DIRECTORY</></term>
       <listitem>
        <para>
         Build with support for <acronym>SSL</> (encrypted) connections. 
         This requires the <productname>OpenSSL</> package to be installed.
         The <replaceable>DIRECTORY</> argument specifies the
         root directory of the <productname>OpenSSL</> installation; the
         default is <filename>/usr/local/ssl</>.
        </para>

        <para>
         <filename>configure</> will check for the required header
         files and libraries to make sure that your <productname>OpenSSL</>
         installation is sufficient before proceeding.
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--enable-syslog</term>
       <listitem>
        <para>
         Enables the <productname>PostgreSQL</> server to use the
         syslog logging facility. (Using this option does not mean
         that you must log with syslog or even that it will be done
         by default, it simply makes it possible to turn this option
         on at run time.)
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>--enable-debug</term>
       <listitem>
        <para>
         Compiles all programs and libraries with debugging symbols.
         This means that you can run the programs through a debugger
         to analyze problems. This option is not recommended for
         production use.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
   </para>

   <para>
    You can set the <envar>CC</> environment variable to choose the C
    compiler to use. If you don't then <filename>configure</> will
    look for one. For example:
<screen>
<userinput>CC=/opt/bin/gcc ./configure</>
</screen>
   </para>
    
  </step>

  <step>
   <title>Build</title>

   <para>
    To start the build, type
<screen>
<userinput>gmake</userinput>
</screen>
    (Remember to use <acronym>GNU</> <application>make</>.) The build
    can take anywhere from 5 minutes to half an hour. The last line
    displayed should be
<screen>
All of PostgreSQL is successfully made. Ready to install.
</screen>
   </para>
  </step>

  <step>
   <title>Regression Tests</title>

   <para>
    If you want to test the newly built server before you install it,
    you can run the regression tests at this point. The regression
    tests are a test suite to verify that <productname>PostgreSQL</> runs on your machine
    in the way the developers expected it to. Type
<screen>
<userinput>gmake -C src/test/regress all runcheck</userinput>
<!-- XXX How about just `gmake check'? -->
</screen>
    It is possible that some tests fail, due to differences in error
    message wording or floating point results. The file
    <filename>src/test/regress/README</> and
    <![%flattext-install-include[the <citetitle>Administrator's Guide</citetitle>]]>
    <![%flattext-install-ignore[<xref linkend="regress">]]>
    contain detailed
    information about interpreting the test results. You can repeat
    this test at any later time by issuing the same command.
   </para>
  </step>

  <step id="install">
   <title>Installing The Files</title>

   <note>
    <para>
     If you are upgrading an existing system and are going to install
     the new files over the old ones then you should have backed up
     your data and shut down the old server by now, as explained in
     <xref linkend="install-upgrading"> above.
    </para>
   </note>

   <para>
    To install <productname>PostgreSQL</> enter
<screen>
<userinput>gmake install</userinput>
</screen>
    This will install files into the directories that were specified
    in <xref linkend="configure">. Make sure that you have appropriate
    permissions to write into that area. Normally you need to do this
    step as root. Alternatively, you could create the target
    directories in advance and arrange for appropriate permissions to
    be granted.
   </para>

   <para>
    If you built the Perl or Python interfaces and you were not the
    root user when you executed the above command then that part of
    the installation probably failed. In that case you should become
    the root user and then do
<screen>
<userinput>gmake -C src/interfaces/perl5 install</userinput>
<userinput>gmake -C src/interfaces/python install</userinput>
</screen>
    Due to a quirk in the Perl build environment the first command
    will actually rebuild the complete interface and then install it.
    This is not harmful, just unusual. If you do not have superuser
    access you are on your own: you can still take the required files
    and place them in other directories where Perl or Python can find
    them, but how to do that is left as an exercise.
   </para>

   <formalpara>
    <title>Client-only installation</title>
    <para>
     If you want to install only the client applications and
     interfaces, then you can use these commands:
<screen>
<userinput>gmake -C src/bin install</>
<userinput>gmake -C src/interfaces install</>
<userinput>gmake -C doc install</>
</screen>
    </para>
   </formalpara>

   <para>
    To undo the installation use the command <command>gmake
    uninstall</>. However, this will not remove the Perl and Python
    interfaces and it will not remove any directories.
   </para>
  </step>
  </procedure>

  <para>
   After the installation you can make room by removing the built
   files from the source tree with the <command>gmake clean</>
   command. This will preserve the choices made by the configure
   program, so that you can rebuild everything with <command>gmake</>
   later on. To reset the source tree to the state in which it was
   distributed, use <command>gmake distclean</>. If you are going to
   build for several platforms from the same source tree you must do
   this and re-configure for each build.
  </para>

 </sect1>

 <sect1 id="install-post">
  <title>Post-Installation Setup</title>

  <sect2>
   <title>Shared Libraries</title>
   <para>
    On most systems that have shared libraries (which most systems do)
    you need to tell your system how to find the newly installed
    shared libraries. How to do this varies between platforms, but the
    most widely usable method is to set the environment variable
    <envar>LD_LIBRARY_PATH</> like so: In Bourne shells (sh, ksh,
    bash, zsh)
<programlisting>
LD_LIBRARY_PATH=/usr/local/pgsql/lib
export LD_LIBRARY_PATH
</programlisting>
    or in csh or tcsh
<programlisting>
setenv LD_LIBRARY_PATH /usr/local/pgsql/lib
</programlisting>
    Replace <literal>/usr/local/pgsql/lib</> with whatever you set
    <option><literal>--libdir</></> to in <xref linkend="configure">.
    You should put these commands into a shell start-up file such as
    <filename>/etc/profile</> or <filename>~/.bash_profile</>.
   </para>

   <para>
    On Linux systems the following is the preferred method, but you
    must have root access. Edit the file <filename>/etc/ld.so.conf</>
    to add a line
<programlisting>
<filename>/usr/local/pgsql/lib</>
</programlisting>
    Then run command <command>/sbin/ldconfig</>.
   </para>

   <para>
    If in doubt, refer to the manual pages of your system. If you later
    on get a message like
<screen>
psql: error in loading shared libraries
libpq.so.2.1: cannot open shared object file: No such file or directory
</screen>
    then this step was necessary.  Simply take care of it then.
   </para>

  </sect2>

  <sect2>
   <title>Environment Variables</title>
   <para>
    If you installed into <filename>/usr/local/pgsql</> or some other
    location that is not searched for programs by default, you need to
    add <filename>/usr/local/pgsql/bin</> (or what you set
    <option><literal>--bindir</></> to in <xref linkend="configure">)
    into your <envar>PATH</>. To do this, add the following to your
    shell start-up file, such as <filename>~/.bash_profile</> (or
    <filename>/etc/profile</>, if you want it to affect every user):
<programlisting>
PATH=$PATH:/usr/local/pgsql/bin
</programlisting>
    If you are using csh or tcsh, then use this command:
<programlisting>
set path = ( /usr/local/pgsql/bin path )
</programlisting>
   </para>

   <para>
    To enable your system to find the <application>man</>
    documentation, you need to add a line like the following to a
    shell start-up file:
<programlisting>
MANPATH=$MANPATH:/usr/local/pgsql/man
</programlisting>
   </para>

   <para>
    The environment variables <envar>PGHOST</> and <envar>PGPORT</>
    specify to client applications the host and port of the database
    server, overriding the compiled-in defaults. If you are going to
    run client applications remotely then it is convenient if every
    user that plans to use the database sets <envar>PGHOST</>, but it
    is not required and the settings can be communicated via command
    line options to most client programs.
   </para>
  </sect2>
 </sect1>


<![%flattext-install-include;[
 <sect1 id="install-getting-started">
  <title>Getting Started</title>

  <para>
   The following is a quick summary of how to get <productname>PostgreSQL</> up and
   running once installed. The <citetitle>Administrator's Guide</>
   contains more information.
  </para>

  <procedure>
   <step>
    <para>
     Create the <productname>PostgreSQL</> server account. This is the user the server
     will run as. For production use you should create a separate,
     unprivileged account (<quote>postgres</> is commonly used). If
     you do not have root access or just want to play around, your own
     user account is enough, but running the server as root is a
     security risk and therefore not allowed.
<screen>
<userinput>adduser postgres</>
</screen>
    </para>
   </step>

   <step>
    <para>
     Create a database installation with the <command>initdb</>
     command. To run <command>initdb</> you must be logged in to your
     <productname>PostgreSQL</> server account. It will not work as
     root.
<screen>
root# <userinput>mkdir /usr/local/pgsql/data</>
root# <userinput>chown postgres /usr/local/pgsql/data</>
root# <userinput>su - postgres</>
postgres$ <userinput>/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data</>
</screen>
    </para>

    <para>
     The <option>-D</> option specifies the location where the data
     will be stored. You can use any path you want, it does not have
     to be under the installation directory. Just make sure that the
     server account can write to the directory (or create it, if it
     doesn't already exist) before starting <command>initdb</>, as
     illustrated here.
    </para>
   </step>

   <step>
    <para>
     The previous step should have told you how to start up the
     database server. Do so now. The command should look something
     like
<programlisting>
/usr/local/pgsql/bin/postmaster -D /usr/local/pgsql/data
</programlisting>
     This will start the server in the foreground. To put the server
     in the background use something like
<programlisting>
nohup /usr/local/pgsql/bin/postmaster -D /usr/local/pgsql/data \
    &lt;/dev/null &gt;&gt;server.log 2&gt;&amp;1 &lt;/dev/null &amp;
</programlisting>
    </para>

    <para>
     To stop a server running in the background you can type
<programlisting>
kill `cat /usr/local/pgsql/data/postmaster.pid`
</programlisting>
    </para>

    <para>
     In order to allow TCP/IP connections (rather than only Unix
     domain socket ones) you need to pass the <option>-i</> option to
     <filename>postmaster</>.
    </para>
   </step>

   <step>
    <para>
     Create a database:
<screen>
<userinput>createdb testdb</>
</screen>
     Then enter
<screen>
<userinput>psql testdb</>
</screen>
     to connect to that database. At the prompt you can enter SQL
     commands and start experimenting.
    </para>
   </step>
  </procedure>
 </sect1>

 <sect1 id="install-whatnow">
  <title>What Now?</title>

  <para>
   <itemizedlist>
    <listitem>
     <para>
      The <citetitle>Tutorial</> should be your first reading if you
      are completely new to <acronym>SQL</> databases. It should have
      been installed at
      <filename>/usr/local/pgsql/doc/tutorial/index.html</> unless you
      changed the installation directories.
     </para>
    </listitem>

    <listitem>
     <para>
      If you are familiar with database concepts then you want to
      proceed with the <citetitle>Administrator's Guide</citetitle>,
      which contains information about how to set up the database
      server, database users, and authentication. It can be found at
      <filename>/usr/local/pgsql/doc/admin/index.html</>.
     </para>
    </listitem>

    <listitem>
     <para>
      Usually, you will want to modify your computer so that it will
      automatically start the database server whenever it boots. Some
      suggestions for this are in the <citetitle>Administrator's
      Guide</citetitle>.
     </para>
    </listitem>

    <listitem>
     <para>
      Run the regression tests against the installed server (using the
      sequential test method). If you didn't run the tests before
      installation, you should definitely do it now. This is also
      explained in the <citetitle>Administrator's Guide</citetitle>.
     </para>
    </listitem>

   </itemizedlist>
  </para>

<!-- do we still ship this? -->
<!--
  <para>
   The documentation is also available in Postscript format. If you
   have a Postscript printer, or have your machine already set up to
   accept Postscript files using a print filter, then to print, for
   example the <citetitle>User's Guide</> simply type
<programlisting>
cd /usr/local/pgsql/doc
gunzip -c user.ps.gz | lpr
</programlisting>
   Here is how you might do it if you have <productname>Ghostscript</>
   installed on your system and are writing to a Laserjet printer.
<programlisting>
gunzip -c user.ps.gz \
    | gs -sDEVICE=laserjet -r300 -q -dNOPAUSE -sOutputFile=- \
    | lpr
</programlisting>
   Printer setups can vary wildly from system to system. If in doubt,
   consult your manuals or your local expert.
  </para>
-->

 </sect1>
]]>


 <sect1 id="supported-platforms">
  <title>Supported Platforms</title>

  <para>
   At the time of release, <productname>PostgreSQL</> &version; has been verified by the
   developer community to work on the following platforms. A supported
   platform generally means that <productname>PostgreSQL</> builds and installs according
   to these instructions and that the regression tests pass, except
   for minor differences.
  </para>

  <note>
   <para>
    If you are having problems with the installation on a supported
    platform, please write to <email>pgsql-bugs@postgresql.org</email>
    or <email>pgsql-ports@postgresql.org</email>, not to the people
    listed here.
   </para>
  </note>

    <informaltable>
     <tgroup cols="4">
      <thead>
       <row>
	<entry><acronym>OS</acronym></entry>
	<entry>Processor</entry>
	<entry>Version</entry>
	<entry>Reported</entry>
	<entry>Remarks</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry>AIX 4.3.2</entry>
	<entry>RS6000</entry>
	<entry>7.0</entry>
	<entry>2000-04-05, Andread Zeugswetter (<email>Andreas.Zeugswetter@telecom.at</>)</entry>
        <entry>See also <filename>doc/FAQ_AIX</></entry>
       </row>
       <row>
	<entry>BSDI 4.01</entry>
	<entry>x86</entry>
	<entry>7.0</entry>
	<entry>2000-04-04, Bruce Momjian (<email>pgman@candle.pha.pa.us</>)</entry>
        <entry></entry>
       </row>
       <row>
	<entry>Compaq Tru64 5.0</entry>
	<entry>Alpha</entry>
	<entry>7.0</entry>
	<entry>2000-04-11, Andrew McMurry (<email>andrew.mcmurry@astro.uio.no</>)</entry>
        <entry></>
       </row>
       <row>
	<entry>FreeBSD 4.0</entry>
	<entry>x86</entry>
	<entry>7.0</entry>
	<entry>2000-04-04, Marc Fournier (<email>scrappy@hub.org</>)</entry>
        <entry></>
       </row>
       <row>
	<entry>HPUX 9.0x and 10.20</entry>
	<entry>PA-RISC</entry>
	<entry>7.0</entry>
	<entry>2000-04-12, Tom Lane (<email>tgl@sss.pgh.pa.us</>)</entry>
        <entry>See also <filename>doc/FAQ_HPUX</></>
       </row>
       <row>
	<entry>IRIX 6.5.6f</entry>
	<entry>MIPS</entry>
	<entry>6.5.3</entry>
	<entry>2000-02-18, Kevin Wheatley (<email>hxpro@cinesite.co.uk</>)</entry>
	<entry>MIPSPro 7.3.1.1m N32 build</entry>
       </row>
       <row>
	<entry>Linux 2.0.x</entry>
	<entry>Alpha</entry>
	<entry>7.0</entry>
	<entry>2000-04-05, Ryan Kirkpatrick (<email>pgsql@rkirkpat.net</>)</entry>
	<entry>with published patches</entry>
       </row>
       <row>
	<entry>Linux 2.2.x</entry>
	<entry>armv4l</entry>
	<entry>7.0</entry>
	<entry>2000-04-17, Mark Knox (<email>segfault@hardline.org</>)</entry>
	<entry>Regression test needs work.</entry>
       </row>
       <row>
	<entry>Linux 2.2.x</entry>
	<entry>x86</entry>
	<entry>7.0</entry>
	<entry>2000-03-26, Lamar Owen (<email>lamar.owen@wgcr.org</>)</entry>
	<entry></>
       </row>
       <row>
	<entry>Linux 2.0.x</entry>
	<entry>MIPS</entry>
	<entry>7.0</entry>
	<entry>2000-04-13, Tatsuo Ishii (<email>t-ishii@sra.co.jp</>)</entry>
	<entry>Cobalt Qube</entry>
       </row>
       <row>
	<entry>Linux 2.2.5</entry>
	<entry>Sparc</entry>
	<entry>7.0</entry>
	<entry>2000-04-02, Tom Szybist (<email>szybist@boxhill.com</>)</entry>
	<entry></>
       </row>
       <row>
	<entry>LinuxPPC R4</entry>
	<entry>PPC603e</entry>
	<entry>7.0</entry>
	<entry>2000-04-13, Tatsuo Ishii (<email>t-ishii@sra.co.jp</>)</entry>
	<entry></>
       </row>
       <row>
	<entry>mklinux</entry>
	<entry>PPC750</entry>
	<entry>7.0</entry>
	<entry>2000-04-13, Tatsuo Ishii (<email>t-ishii@sra.co.jp</>)</entry>
	<entry></>
       </row>
       <row>
	<entry>NetBSD 1.4</entry>
	<entry>arm32</entry>
	<entry>7.0</entry>
	<entry>2000-04-08, Patrick Welche (<email>prlw1@newn.cam.ac.uk</>)</entry>
	<entry></>
       </row>
       <row>
	<entry>NetBSD 1.4U</entry>
	<entry>x86</entry>
	<entry>7.0</entry>
	<entry>2000-03-26, Patrick Welche (<email>prlw1@newn.cam.ac.uk</>)</entry>
	<entry></>
       </row>
       <row>
	<entry>NetBSD</entry>
	<entry>m68k</entry>
	<entry>7.0</entry>
	<entry>2000-04-10, Henry B. Hotz (<email>hotz@jpl.nasa.gov</>)</entry>
	<entry>Mac 8xx</entry>
       </row>
       <row>
	<entry>NetBSD</entry>
	<entry>Sparc</entry>
	<entry>7.0</entry>
	<entry>2000-04-13, Tom I. Helbekkmo (<email>tih@kpnQwest.no</>)</entry>
	<entry></>
       </row>
       <row>
	<entry>QNX 4.25</entry>
	<entry>x86</entry>
	<entry>7.0</entry>
	<entry>2000-04-01, Dr. Andreas Kardos (<email>kardos@repas-aeg.de</>)</entry>
	<entry>See also <filename>doc/FAQ_QNX4</></>
       </row>
       <row>
	<entry>SCO OpenServer 5</entry>
	<entry>x86</entry>
	<entry>6.5</entry>
	<entry>1999-05-25, Andrew Merrill (<email>andrew@compclass.com</>)</entry>
	<entry>See also <filename>doc/FAQ_SCO</></>
       </row>
       <row>
	<entry>SCO UnixWare 7</entry>
	<entry>x86</entry>
	<entry>7.0</entry>
	<entry>2000-04-18, Billy G. Allie (<email>Bill.Allie@mug.org</>)</entry>
	<entry>See also <filename>doc/FAQ_SCO</></entry>
       </row>
       <row>
	<entry>Solaris</entry>
	<entry>x86</entry>
	<entry>7.0</entry>
	<entry>2000-04-12, Marc Fournier (<email>scrappy@hub.org</>)</entry>
	<entry></>
       </row>
       <row>
	<entry>Solaris 2.5.1-2.7</entry>
	<entry>Sparc</entry>
	<entry>7.0</entry>
	<entry>2000-04-12, Peter Eisentraut (<email>peter_e@gmx.net</email>),
                           Marc Fournier (<email>scrappy@hub.org</>)</entry>
	<entry></>
       </row>
       <row>
	<entry>SunOS 4.1.4</entry>
	<entry>Sparc</entry>
	<entry>7.0</entry>
	<entry>2000-04-13, Tatsuo Ishii (<email>t-ishii@sra.co.jp</>)</entry>
	<entry></>
       </row>
       <row>
	<entry>Windows/Win32</entry>
	<entry>x86</entry>
	<entry>7.0</entry>
	<entry>2000-04-02, Magnus Hagander (<email>mha@sollentuna.net</>)</entry>
	<entry>Client-side libraries or ODBC/JDBC, no server-side</entry>
       </row>
       <row>
	<entry>WinNT/Cygwin</entry>
	<entry>x86</entry>
	<entry>7.0</entry>
	<entry>2000-03-30, Daniel Horak (<email>horak@sit.plzen-city.cz</>)</entry>
        <entry>with RedHat/Cygnus <productname>Cygwin</> toolset</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>

  <formalpara>
   <title>Unsupported Platforms</title>
   <para>
    The following platforms have not been verified to work. Platforms
    listed for version 6.3.x and later should also work with
    &version;, but we did not receive explicit confirmation of such at
    the time this list was compiled. We include these here to let you
    know that these platforms <emphasis>could</> be supported if given
    some attention.
   </para>
  </formalpara>

  <informaltable>
   <tgroup cols="4">
    <thead>
     <row>
      <entry><acronym>OS</acronym></entry>
      <entry>Processor</entry>
      <entry>Version</entry>
      <entry>Reported</entry>
      <entry>Remarks</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry>BeOS</entry>
      <entry>x86</entry>
      <entry>7.0</entry>
      <entry>2000-05-01, Adam Haberlach (<email>adam@newsnipple.com</>)</entry>
      <entry>Client-side coming soon?</entry>
     </row>

     <row>
      <entry>DGUX 5.4R4.11</entry>
      <entry>m88k</entry>
      <entry>6.3</entry>
      <entry>1998-03-01, Brian E Gallew (<email>geek+@cmu.edu</>)</entry>
      <entry>6.4 probably OK. Needs new maintainer.</entry>
     </row>

     <row>
      <entry>NetBSD 1.3</entry>
      <entry>VAX</entry>
      <entry>6.3</entry>
      <entry>1998-03-01, Tom I Helbekkmo (<email>tih@kpnQwest.no</>)</entry>
      <entry>7.0 should work.</entry>
     </row>

     <row>
      <entry>System V R4 4.4</entry>
      <entry>m88k</entry>
      <entry>6.2.1</entry>
      <entry>1998-03-01, Doug Winterburn (<email>dlw@seavme.xroads.com</>)</entry>
      <entry>Needs new TAS spinlock code</entry>
     </row>

     <row>
      <entry>System V R4</entry>
      <entry>MIPS</entry>
      <entry>6.4</entry>
      <entry>1998-10-28, Frank Ridderbusch (<email>ridderbusch.pad@sni.de</>)</entry>
      <entry>No 64-bit integer</entry>
     </row>

     <row>
      <entry>Ultrix</entry>
      <entry>MIPS, VAX</entry>
      <entry>6.x</entry>
      <entry>1998-03-01</entry>
      <entry>No recent reports. Obsolete?</entry>
     </row>

     <row>
      <entry>MacOS</entry>
      <entry>all</entry>
      <entry>6.x</entry>
      <entry>1998-03-01</entry>
      <entry>Not library compatible; use ODBC/JDBC.</entry>
     </row>

     <row>
      <entry>NextStep</entry>
      <entry>x86</entry>
      <entry>6.x</entry>
      <entry>1998-03-01, David Wetzel (<email>dave@turbocat.de</email>)</entry>
      <entry>Client-only support</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>

 </sect1>

</chapter>
