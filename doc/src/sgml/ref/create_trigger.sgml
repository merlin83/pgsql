<REFENTRY ID="SQL-CREATETRIGGER">
 <REFMETA>
  <REFENTRYTITLE>
   CREATE TRIGGER
  </REFENTRYTITLE>
  <REFMISCINFO>SQL - Language Statements</REFMISCINFO>
 </REFMETA>
 <REFNAMEDIV>
  <REFNAME>
   CREATE TRIGGER
  </REFNAME>
  <REFPURPOSE>
   Creates a new trigger
  </REFPURPOSE>
 <REFSYNOPSISDIV>
  <REFSYNOPSISDIVINFO>
   <DATE>1998-09-21</DATE>
  </REFSYNOPSISDIVINFO>
  <SYNOPSIS>
CREATE TRIGGER <REPLACEABLE CLASS="PARAMETER">name</REPLACEABLE> { BEFORE | AFTER }
    { <REPLACEABLE CLASS="PARAMETER">event</REPLACEABLE> [OR ...] }
    ON <REPLACEABLE CLASS="PARAMETER">table</REPLACEABLE> FOR EACH { ROW | STATEMENT }
    EXECUTE PROCEDURE <REPLACEABLE CLASS="PARAMETER">funcname</REPLACEABLE> ( <REPLACEABLE CLASS="PARAMETER">arguments</REPLACEABLE> )
  </SYNOPSIS>
  
  <REFSECT2 ID="R2-SQL-CREATETRIGGER-1">
   <REFSECT2INFO>
    <DATE>1998-09-21</DATE>
   </REFSECT2INFO>
   <TITLE>
    Inputs
   </TITLE>
   <PARA>
   </PARA>
       <VARIABLELIST>
	<VARLISTENTRY>
	 <TERM>
	  <ReturnValue><replaceable class="parameter">name</replaceable></ReturnValue>
	 </TERM>
	 <LISTITEM>
	  <PARA>
	   The name of an existing trigger.
	  </PARA>
	 </LISTITEM>
	</VARLISTENTRY>
	<VARLISTENTRY>
	 <TERM>
	  <ReturnValue><replaceable class="parameter">table</replaceable></ReturnValue>
	 </TERM>
	 <LISTITEM>
	  <PARA>
	   The name of a table.
	  </PARA>
	 </LISTITEM>
	</VARLISTENTRY>
	<VARLISTENTRY>
	 <TERM>
	  <ReturnValue><replaceable class="parameter">event</replaceable></ReturnValue>
	 </TERM>
	 <LISTITEM>
	  <PARA>
	   One of INSERT, DELETE or UPDATE.
	  </PARA>
	 </LISTITEM>
	</VARLISTENTRY>
	<VARLISTENTRY>
	 <TERM>
	  <ReturnValue><replaceable class="parameter">funcname</replaceable></ReturnValue>
	 </TERM>
	 <LISTITEM>
	  <PARA>
	   A user-supplied function.
	  </PARA>
	 </LISTITEM>
	</VARLISTENTRY>
       </variablelist>
  </REFSECT2>
  
  <REFSECT2 ID="R2-SQL-CREATETRIGGER-2">
   <REFSECT2INFO>
    <DATE>1998-09-21</DATE>
   </REFSECT2INFO>
   <TITLE>
    Outputs
   </TITLE>
   <PARA>
       <VARIABLELIST>
	<VARLISTENTRY>
	 <TERM>
	  <ReturnValue>CREATE</ReturnValue>
	 </TERM>
	 <LISTITEM>
	  <PARA>
	   This message is returned if the trigger is successfully created.

   </VARIABLELIST>
  </REFSECT2>
 </REFSYNOPSISDIV>
 
 <REFSECT1 ID="R1-SQL-CREATETRIGGER-1">
  <REFSECT1INFO>
   <DATE>1998-09-21</DATE>
  </REFSECT1INFO>
  <TITLE>
   Description
  </TITLE>
  <PARA>
   <command>CREATE TRIGGER</command> will enter a new trigger into the current
   data base.  The trigger will be associated with the relation
   <replaceable class="parameter">relname</replaceable> and will execute
   the specified function <replaceable class="parameter">funcname</replaceable>.
  </PARA>
  <PARA>
   The trigger can be specified to  fire  either  before  the
   operation is attempted on a tuple (before constraints
   are checked and the INSERT, UPDATE or DELETE is attempted)  or
   after  the  operation  has been attempted (e.g. after constraints
   are checked and the INSERT, UPDATE or DELETE has completed).  If the
   trigger fires before the event, the trigger may
   skip the operation for the current tuple, or change the tuple
   being  inserted  (for  INSERT and UPDATE operations only).  If
   the trigger fires after the event,  all  changes,  including  the
   last insertion, update, or deletion, are "visible" to the trigger.
  </PARA>
  <PARA>
   Refer to the chapters on SPI and Triggers in the
<citetitle>PostgreSQL Programmer's Guide</citetitle>  for  more
   information.
  </PARA>
  <REFSECT2 ID="R2-SQL-CREATETRIGGER-3">
   <REFSECT2INFO>
    <DATE>1998-09-21</DATE>
   </REFSECT2INFO>
   <TITLE>
    Notes
   </TITLE>
   <PARA>
    <command>CREATE TRIGGER</command> is a <productname>Postgres</productname>
 language extension.
   </PARA>
  <PARA>
   Only the relation owner may create a trigger on this relation.
  </PARA>
  <PARA>
   As of the current release (v6.4), STATEMENT triggers are not implemented.
  </PARA>
   <PARA>
    Refer to <command>DROP TRIGGER</command> for information on how to 
    remove triggers.
   </PARA>
   
  </REFSECT2>
  
 <REFSECT1 ID="R1-SQL-CREATETRIGGER-2">
  <TITLE>
   Usage
  </TITLE>
  <PARA>
  Check if the specified distributor code exists in the distributors
  table before appending or updating a row in the table films:
  </PARA>
  <ProgramListing>
CREATE TRIGGER if_dist_exists
    BEFORE INSERT OR UPDATE ON films FOR EACH ROW
    EXECUTE PROCEDURE check_primary_key ('did', 'distributors', 'did');
  </ProgramListing>
  <PARA>
    Before cancelling a distributor or updating its code, remove every
    reference to the table films:
  </PARA>
  <ProgramListing>
CREATE TRIGGER if_film_exists 
    BEFORE DELETE OR UPDATE ON distributors FOR EACH ROW
    EXECUTE PROCEDURE check_foreign_key (1, 'CASCADE', 'did', 'films', 'did');
  </ProgramListing>
 </REFSECT1>
 
 <REFSECT1 ID="R1-SQL-CREATETRIGGER-3">
  <TITLE>
   Compatibility
  </TITLE>
  <PARA>
  </PARA>
  
  <REFSECT2 ID="R2-SQL-CREATETRIGGER-4">
   <REFSECT2INFO>
    <DATE>1998-09-21</DATE>
   </REFSECT2INFO>
   <TITLE>
    SQL92
   </TITLE>
   <PARA>
   There is no <command>CREATE TRIGGER</command> in <acronym>SQL92</acronym>.
   </PARA>
   <PARA>
    The second example above may also be done by using a FOREIGN KEY
    constraint as in:
   </PARA>
  <ProgramListing>
CREATE TABLE distributors (
    did      DECIMAL(3),
    name     VARCHAR(40),
    CONSTRAINT if_film_exists
        FOREIGN KEY(did) REFERENCES films
            ON UPDATE CASCADE ON DELETE CASCADE  
);
  </ProgramListing>
   <PARA>
    However, foreign keys are not yet implemented (as of version 6.4) in
    <productname>Postgres</productname>.
   </PARA>
</REFENTRY>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
