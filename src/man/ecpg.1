.\" This is -*-nroff-*-
.\" XXX standard disclaimer belongs here....
.TH ECPG UNIX 2/11/98 PostgreSQL PostgreSQL
.SH NAME
ecpg - embedded SQL preprocessor for C
.SH SYNOPSIS
.BR ecpg
[\c
.BR "-v"
]
[\c
.BR "-d"
]
[\c
.BR "-o"
outfile
]
file1
[file2]
[...]
.in -5n
.SH DESCRIPTION
ecpg an embedded SQL in C package for PostgreSQL. It enables you to
develop C programs with embedded SQL code.
.PP
.IR "ecpg"
understands the following command-line options:
.TP
.BR "-v"
Print version information.
.TP
.BR "-d"
Turn on debugging.
.TP
.BR "-o" " outfile"
Specifies that
.IR "ecpg"
should write all its output to 
.IR "outfile". If no such option is given the output is written to foo.c
if the input file was name foo.pgc or to foo.bar.c if the input file was
foo.bar.
.TP
.BR "file1, file2, ..."
The files to be processed.
.SH "BUGS"
The return code is alway -1 in case of an error. You cannot see which error
occured by examining the return code.
.TP
The cursor is opened when the declare statement is issued.
.TP
ecpg does not understand enum datatypes.
.TP
The is no exec sql prepare statement.
.TP
The complete structure definition has to be listed inside the declare section for ecpg to be able to understand it.
.TP
Each variable has to be defined on a line on its own.
.TP
There is no way yet to fill a complete array with one call except arrays of [unsigned] char
which are considered strings.
.TP
ecpg cannot use pointer variables except [unsigned] char *
.SH "RETURN VALUE"
.IR ecpg
returns 0 to the shell on successful completion, -1 for errors,
.SH "SEE ALSO"
cc(1).

