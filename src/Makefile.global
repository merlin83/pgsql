#----------------------------------------------------------------------------
#
# Makefile.global--
#    global configuration for the Makefiles
#
# Copyright (c) 1994, Regents of the University of California
#
#
# IDENTIFICATION
#    $Header: /home/rubik/work/pgcvs/CVSROOT/pgsql/src/Attic/Makefile.global,v 1.83 1997-01-06 10:09:04 bryanh Exp $
#
# NOTES
#    Essentially all Postgres make files include this file and use the 
#    variables it sets.  
#
#    To override the default setting, create a Makefile.custom in this
#    directory and put your defines there. (Makefile.custom is included
#    near the end of this file).  Sometimes, a variable gets set in
#    Makefile.global after Makefile.custom has been included, so you can't
#    simply set that variable in Makefile.custom.  In those cases, there is
#    often another variable (like CUSTOM_COPT) that you can set in 
#    Makefile.custom that influences the later setting of the true variable
#    of interest (like CFLAGS) by Makefile.global.
#
#
#    If you change any of these defines you probably have to 
#       make clean; make
#    since no dependencies are created for these. (of course you can 
#    be crafty and check what files really depend on them and just remake
#    those).
#        
#    Before including this file, you must set the SRCDIR variable to the 
#    path of the top of the Postgres source tree (the directory that 
#    contains this file).  
#
#-------------------------------------------------------------------------


##############################################################################
#
# CONFIGURATION SECTION
#
# Following are settings pertaining to the postgres build and 
# installation.  The most important one is obviously the name 
# of the port.

#  The name of the port.  Valid choices are:
#   aix            IBM on AIX 3.2.5
#   alpha          DEC Alpha AXP on OSF/1 2.0
#   BSD44_derived  OSs derived from 4.4-lite BSD (NetBSD, FreeBSD)
#   bsdi           BSD/OS 2.0, 2.01, 2.1
#   dgux           DG/UX 5.4R3.10
#   hpux           HP PA-RISC on HP-UX 9.0
#   i386_solaris   i386 Solaris
#   irix5          SGI MIPS on IRIX 5.3 or better
#   linux          Intel x86 on Linux 1.2 and Linux ELF
#                  (For non-ELF Linux, see LINUX_ELF below).
#   next           Motorola MC68K or Intel x86 on NeXTSTEP 3.2
#   sparc_solaris  SUN SPARC on Solaris 2.4
#   sunos4          SUN SPARC on SunOS 4.1.3
#   svr4           Intel x86 on Intel SVR4
#   ultrix4        DEC MIPS on Ultrix 4.4
#
#  Note that portname is defined here to be UNDEFINED to remind you
#  to change it in Makefile.custom.
#
#  make sure that you have no whitespaces after the PORTNAME setting
#  or the makefiles can get confused
PORTNAME= UNDEFINED

# Ignore LINUX_ELF if you're not using Linux.  But if you are, and you're
# compiling to a.out (which means you're using the dld dynamic loading 
# library), set LINUX_ELF to null in Makefile.custom.
LINUX_ELF= 1

LIBPQDIR:= $(SRCDIR)/libpq

# For convenience, POSTGRESDIR is where DATADIR, BINDIR, and LIBDIR 
# and other target destinations are rooted.  Of course, each of these is 
# changable separately.
POSTGRESDIR= /usr/local/pgsql

# DATADIR specifies where the postmaster expects to find its database.
# This may be overridden by command line options or the PGDATA environment
# variable.
DATADIR= $(POSTGRESDIR)/data

# Where the postgres executables live (changeable by just putting them
# somewhere else and putting that directory in your shell PATH)
BINDIR= $(POSTGRESDIR)/bin

# Where libpq.a gets installed.  You must put it where your loader will
# look for it if you wish to use the -lpq convention.  Otherwise you
# can just put the absolute pathname to the library at the end of your
# command line.
LIBDIR= $(POSTGRESDIR)/lib

# This is the directory where IPC utilities ipcs and ipcrm are located
#
IPCSDIR= /usr/bin

# Where the man pages (suitable for use with "man") get installed.
POSTMANDIR= $(POSTGRESDIR)/man

# Where the formatted documents (e.g., the reference manual) get installed.
POSTDOCDIR= $(POSTGRESDIR)/doc

# Where the header files necessary to build frontend programs get installed.
HEADERDIR= $(POSTGRESDIR)/include

# NAMEDATALEN is the max length for system identifiers (e.g. table names,
# attribute names, function names, etc.)
#
# These MUST be set here.  DO NOT COMMENT THESE OUT
# Setting these too high will result in excess space usage for system catalogs
# Setting them too low will make the system unusable.
# values between 16 and 64 that are multiples of four are recommended.
# 
# NOTE also that databases with different NAMEDATALEN's cannot interoperate!
#
# THERE ARE REDUNDANT DEFINITIONS OF THESE VALUES IN config.h.
# Don't change anything here without changing it there too.

NAMEDATALEN= 32
# OIDNAMELEN should be set to NAMEDATALEN + sizeof(Oid)
OIDNAMELEN= 36
 
##############################################################################
#
# FEATURES 
#
# To disable a feature, comment out the entire definition
# (that is, prepend '#', don't set it to "0" or "no").

# Compile libpq++
#HAVE_Cplusplus= true

# Commenting out CASSERT will make things go a LOT faster, but you will
# also loose a lot of useful error-checking.
CASSERT= true

# Comment out ENFORCE_ALIGNMENT if you do NOT want unaligned access to
# multi-byte types to generate a bus error.
ENFORCE_ALIGNMENT= true

# Comment out PROFILE to generate a profile version of the binaries
#PROFILE= -p -non_shared

# About the use of readline in psql:
#    psql does not require the GNU readline and history libraries. Hence, we
#    do not compile with them by default. However, there are hooks in the
#    program which supports the use of GNU readline and history. Should you
#    decide to use them, change USE_READLINE to true and change READLINE_INCDIR
#    and READLINE_LIBDIR to reflect the location of the readline and history
#    headers and libraries.
#
USE_READLINE= false

# directories for the readline and history libraries.
#READLINE_INC= -I/home/tools/include
#READLINE_LIB= -L/home/tools/lib -lreadline

# use the following if your readline has a separate history lib
#HISTORY_INC= -I/home/tools/include -I/home/tools/include/readline
#HISTORY_LIB= -L/home/tools/lib -lhistory

# curses is required by readline.  Ncurses has obsoleted curses, and may
# in fact be what goes by the name "curses" on this system.

CURSES_LIB= -L/home/tools/lib -lcurses

# If you plan to use Kerberos for authentication...
#
# Comment out KRBVERS if you do not use Kerberos.
# Set KRBVERS to "4" for Kerberos v4, "5" for Kerberos v5.
# XXX Edit the default Kerberos variables below!
#
#KRBVERS= 5

# Globally pass Kerberos file locations.
# these are used in the postmaster and all libpq applications.
#
# Adjust KRBINCS and KRBLIBS to reflect where you have Kerberos
# include files and libraries installed.
# PG_KRB_SRVNAM is the name under which POSTGRES is registered in
# the Kerberos database (KDC).
# PG_KRB_SRVTAB is the location of the server's keytab file.
#
ifdef KRBVERS
KRBINCS= -I/usr/athena/include
KRBLIBS= -L/usr/athena/lib
KRBFLAGS+= $(KRBINCS) -DPG_KRB_SRVNAM='"postgres_dbms"'
   ifeq ($(KRBVERS), 4)
KRBFLAGS+= -DKRB4
KRBFLAGS+= -DPG_KRB_SRVTAB='"/etc/srvtab"'
KRBLIBS+= -lkrb -ldes
   else
   ifeq ($(KRBVERS), 5)
KRBFLAGS+= -DKRB5
KRBFLAGS+= -DPG_KRB_SRVTAB='"FILE:/krb5/srvtab.postgres"'
KRBLIBS+= -lkrb5 -lcrypto -lcom_err -lisode
   endif
   endif
endif

#
# location of Tcl/Tk headers and libraries
#
# Uncomment this to build the tcl utilities.
# USE_TCL= true
# customize these to your site's needs
#
TCL_INCDIR= /home/tools/include
TCL_LIBDIR= /home/tools/lib
TCL_LIB= -ltcl7.5
TK_INCDIR= /home/tools/include
TK_LIBDIR= /home/tools/lib
TK_LIB= -ltk4.1

X11_INCDIR= /usr/include
X11_LIBDIR= /usr/lib
X11_LIB= -lX11 -lsocket -lnsl

##############################################################################
#
#  YACC

YFLAGS= -d

##############################################################################
#
# Installation. 
#
# For many ports, INSTALL is overridden below.
INSTALL= install
RANLIB= ranlib 

INSTLOPTS= -c -m 444
INSTL_EXE_OPTS= -c -m 555
INSTL_LIB_OPTS= -c -m 664

##############################################################################
#
# For building shell scripts:
# 
# For many ports, these are overridden below.

# DASH_N is what we put before the text on an echo command when we don't
# want a trailing newline.  BACKSLASH_C is what we put at the end of the
# string on a echo command when we don't want a trailing newline.  On
# some systems, you do echo -n "no newline after this", while on others
# you do echo "no newline after this\c".

DASH_N= -n
BACKSLASH_C=


##############################################################################
#
# Customization.
#
# This includes your local customizations if Makefile.custom exists
# in the source directory.  This file doesn't exist in the original
# distribution so that it doesn't get overwritten when you upgrade.
ifneq ($(wildcard $(SRCDIR)/Makefile.custom), )
include $(SRCDIR)/Makefile.custom
endif

#############################################################################
# include port specific rules and variables.
#
#
# HISTORY: Before October 1996, this file included the following line:
#     -include $(MKDIR)/port/postgres.mk.$(PORTNAME)
# Now, we instead have all the former contents of those .mk files inline
# with ifeq ($(PORTNAME) ...).  This makes it easier to read the make
# files and to make certain updates.  It should also help with the migration
# to autoconf.  -Bryan

# Since there are no longer separate files for each platform, much of the
# commonality among the platforms ought to be factored out of the following.

##############################################################################
#
#  AR

ifneq (,$(findstring /$(PORTNAME)/, /BSD44_derived/bsdi/sparc/))
  AROPT = cq
else
  AROPT = crs
endif

##############################################################################
#
# Shared libraries.
# This is overridden for many PORTNAMEs below.

DLSUFFIX= .so

#----------------------------------------------------------------------
ifeq ($(PORTNAME), BSD44_derived)
# cc is gcc, but never mind about that...
CC= gcc

INSTALL= /usr/bin/install
RANLIB=	/usr/bin/ranlib

# FreeBSD 2.1R with new Flex v2.5.2 in /usr/local
LEX= flex
LDADD_BE= -L/usr/local/lib -lfl

CFLAGS_SL= -fpic -DPIC

%.so: %.o
	$(LD) -x -r -o $<.obj $<
	@echo building shared object $@
	@rm -f $@.pic
	@${AR} cq $@.pic `lorder $<.obj | tsort`
	${RANLIB} $@.pic
	@rm -f $@
	$(LD) -x -Bshareable -Bforcearchive \
	  -o $@ $@.pic
endif

#--------------------------------------------------------------------------

ifeq ($(PORTNAME), aix)
# might want to try installbsd instead 
INSTALL= /usr/ucb/install

# the -lm is because "pow" is defined in libbsd.a and we want pow(3m)
LDADD_BE= -lm -lbsd -ll -lld

# MAKE_EXPORTS is required for svr4 loaders that want a file of
# symbol names to tell them what to export/import.
MAKE_EXPORTS= true

#
# Random things that must be passed everywhere to enable 
# everything to compile.  :-/
#
# The -qmaxmem is because of optimizer limits.
# The HAVE_ANSI_CPP flag indicates that cc isn't ANSI but also doesn't
# have a Reiser (pcc-style) cpp.
#
CFLAGS_BE= -qchars=signed -qmaxmem=4000


EXPSUFF= .exp

POSTGRES_EXP= $(SRCDIR)/backend/postgres$(EXPSUFF)

MKLDEXPORT=$(SRCDIR)/backend/port/aix/mkldexport.sh

%$(EXPSUFF):  %.o
	$(MKLDEXPORT) $< `pwd` > $@

$(POSTGRES_EXP): 
	$(MAKE) -C $(SRCDIR)/backend postgres.exp

%.so: %.o %$(EXPSUFF) $(POSTGRES_EXP)
	@echo Making share library $@ from $*.o, $*$(EXPSUFF), and postgres.exp
	$(LD) -H512 -T512 -o $@ -e _nostart \
	  -bI:$(POSTGRES_EXP) -bE:$*$(EXPSUFF) \
	  $*.o -lm -lc 2>/dev/null
endif

#---------------------------------------------------------------------------

ifeq ($(PORTNAME), alpha)
# NOFIXADE disallows unaligned access.
#   on Ultrix and OSF/1 it invokes an explicit syscall.
#   on HP-UX it turns off certain compiler options.
# This is defined here because a bunch of clients include tmp/c.h,
# which is where the work is done on HP-UX.  It only affects the
# backend on Ultrix and OSF/1.
ifdef ENFORCE_ALIGNMENT
CFLAGS_BE= -DNOFIXADE
else
CFLAGS_BE= -DNOPRINTADE
endif
LDADD_BE= -lln

# use the regex library
USE_REGEX= 1

%.so:  %.o
	$(LD) -shared -expect_unresolved '*' -o $@ $<

DASH_N=
BACKSLASH_C= '\\\\c'

endif

#---------------------------------------------------------------------------

ifeq ($(PORTNAME), bsdi)
CC= gcc

PRE_BSDI_2_1= false
ifeq ($(shell uname -r), 2.0)
PRE_BSDI_2_1= true
endif
ifeq ($(shell uname -r), 2.01)
PRE_BSDI_2_1= true
endif

ifeq ($(PRE_BSDI_2_1), false)
# cc is gcc v1.42
# gcc is gcc v2.7.2
  LEX= lex
  LDADD_BE= -ltermcap -ldl -lipc
else
# cc is gcc v1.42
# gcc is gcc v2.6.3
  LEX= flex
# use the regex library
  USE_REGEX= 1
  CFLAGS_BE= -DPRE_BSDI_2_1
  LDADD_BE= -ldld -lcompat -lipc
endif

DLSUFFIX= .o

endif

#--------------------------------------------------------------------------

ifeq ($(PORTNAME), dgux)
CFLAGS_SL= -fpic
%.so: %.o
	$(CC) -shared -o $@ $<

CC= gcc

LDADD_BE= -ldl -lfl

LEX= flex
YACC= bison -y

INSTALL=/usr/bin/X11/bsdinst

endif

#----------------------------------------------------------------------------

ifeq ($(PORTNAME), hpux)
# -W l,-E	export symbols for linking with the shared libraries 
#		dynamic loader

LDADD_BE= -lBSD -ll
ifeq $(CC), cc)
  CFLAGS_BE= -W l,-E
  LDFLAGS_BE= -W l,-E
  LDADD_BE+= -ldld
endif
ifeq ($(CC), gcc)
  LDADD_BE+= /usr/lib/libdld.sl
endif

ifdef ENFORCE_ALIGNMENT
   CFLAGS_BE= -DNOFIXADE
else
   HPUX_VERS:= $(shell uname -r)
   HPUX_MAJOR= ${HPUX_VERS:R:E}
   HPUX_MINOR= ${HPUX_VERS:E}
   ifeq ($(HPUX_MAJOR), 08)
      CFLAGS_BE+= +u -DHP_S500_ALIGN
      LDFLAGS_BE+= +u
   else
   ifeq ($(HPUX_MAJOR), 09)
      ifeq ($(CC), cc)
         CFLAGS_BE+= +u4 
         LDFLAGS_BE+= +u4
      endif
   endif
   endif
endif

# (extended) ANSI flag for cc (-Ae is same as -Aa -D_HPUX_SOURCE)
ifeq ($(CC), cc)
CFLAGS_BE+= -Ae
endif

# This is a script from the MIT X11 distribution. 
INSTALL= bsdinst

# RANLIB is not used on HP-UX
RANLIB= touch

CFLAGS_SL= +z
DLSUFFIX= .sl

%.sl: %.o
	$(LD) -b -o $@ $<

DASH_N= ''
BACKSLASH_C= '\\\\c'

endif

#--------------------------------------------------------------------------

ifeq ($(PORTNAME), i386_solaris)
# cc won't work!
CC= gcc

# RANLIB is not used on solaris
RANLIB= touch

INSTALL= /usr/ucb/install

                                  #
       # Random things that must be passed everywhere to enable
                    # everything to compile.  :-/
                                  #
   # The extra -I flag is to scoop up extra BSD-emulating headers.
# This needs to be fixed.  Things other than the backend should not be
            # accessing headers in the backend directory.
          CFLAGS_BE= -I$(SRCDIR)/backend/port/sparc_solaris
                  LDADD_BE= -lsocket -lnsl -ll -ldl
                        LD_ADD= -lsocket -lnsl

ifeq ($(CC), cc)
CFLAGS_SL= -K PIC
else
CFLAGS_SL= -fPIC
endif

%.so: %.o
	$(LD) -G -Bdynamic -o $@ $<

DASH_N=''
BACKSLASH_C='\\\\c'

endif

#----------------------------------------------------------------------------

ifeq ($(PORTNAME), irix5)
LDADD_BE= -ll

# RANLIB is not used on IRIX 5
RANLIB= touch

#If you have GNU install, by all means set CUSTOM_INSTALL to that in
#Makefile.custom.  If you read the man page for /usr/bin/X11/bsdinst,
#you will see it is not intended for end user use.  It chowns the files
#it installs to root.
INSTALL= /usr/bin/X11/bsdinst

INSTLOPTS=      -m 444
INSTL_EXE_OPTS= -m 555
INSTL_LIB_OPTS= -m 664

%.so: %.o
	$(LD) -G -Bdynamic -o $@ $< $(LD_ADD)

DASH_N=''
BACKSLASH_C='\\\\c'

endif

#---------------------------------------------------------------------------

ifeq ($(PORTNAME), linux)
ifndef LINUX_ELF
DLSUFFIX= .o
LDADD_BE= -ldld
else
DLSUFFIX= .so
LDADD_BE= -ldl
LDFLAGS_BE= -rdynamic
endif
MK_NO_LORDER= true

CC= gcc

# use the regex library
USE_REGEX= 1

CFLAGS_SL= -fpic
%.so: %.o
	$(CC) -shared -o $@ $<

# The Linux gnulib #defines the problem away for you and calls 
# the BSD routines if you give it the right flags.
LDADD_BE+= -lbsd

LEX= flex

endif

#---------------------------------------------------------------------------

ifeq ($(PORTNAME), sunos4)
# cc won't work!
CC= gcc

INSTALL= /usr/bin/install
RANLIB= /usr/bin/ranlib

ifeq ($(CC), cc)
CFLAGS_SL= -PIC
else
CFLAGS_SL= -fPIC
endif
LDADD_BE= -lln -ldl

%.so: %.o
	$(LD) -dc -dp -Bdynamic -o $@ $<
endif

#----------------------------------------------------------------------------

ifeq ($(PORTNAME), sparc_solaris)
# cc won't work!
CC= gcc

LDADD_BE= -lsocket -lnsl -ll -ldl
LD_ADD= -lsocket -lnsl

# RANLIB is not used on solaris
RANLIB= touch

INSTALL= /usr/ucb/install

#
# Random things that must be passed everywhere to enable 
# everything to compile.  :-/
#
# The extra -I flag is to scoop up extra BSD-emulating headers.
CFLAGS_BE= -I$(SRCDIR)/backend/port/sparc_solaris
LDADD_BE+= -lsocket -lnsl

ifeq ($(CC), cc)
CFLAGS_SL= -K PIC
else
CFLAGS_SL= -fPIC
endif

%.so: %.o
	$(LD) -G -Bdynamic -o $@ $<

DASH_N= ''
BACKSLASH_C= '\\\\c'

endif

#-----------------------------------------------------------------------------

ifeq ($(PORTNAME), svr4)
CFLAGS+= -W0
YACC= bison -y

# MAKE_EXPORTS is required for svr4 loaders that want a file of
# symbol names to tell them what to export/import.
MAKE_EXPORTS= true

# RANLIB is not used on svr4
RANLIB= touch

# GNU install
INSTALL= /home/tools/bin/install

#
# Random things that must be passed everywhere to enable
# everything to compile.  :-/
#
# The extra -I flag is to scoop up extra BSD-emulating headers.
CFLAGS_BE+= -I$(SRCDIR)/backend/port/svr4
LDADD_BE= -lsocket -lnsl -lc /usr/ucblib/libucb.a -ll -ldl
LDFLAGS_BE= -LD-Blargedynsym

%.so: %.o
	$(LD) -G -Bdynamic -o $@ $<

DASH_N= ''
BACKSLASH_C= '\\\\c'
endif

#---------------------------------------------------------------------------

ifeq ($(PORTNAME), ultrix4)
ifdef ENFORCE_ALIGNMENT
CFLAGS_BE= -DNOFIXADE
endif
LDADD_BE= -ldl -lln

# install creates intermediate directories
NO_BEFOREINSTL= true

INSTALL= /usr/bin/install
RANLIB= /usr/bin/ranlib

CFLAGS_SL= -G 0
DLSUFFIX= .o

endif


ifneq ($(PORTNAME), next)
LDADD_BE+= -lm
endif

# This goes here so that customization in Makefile.custom is effective
##############################################################################

ifeq($(CUSTOM_INSTALL),)
INSTALL= $(CUSTOM_INSTALL)
endif

#
# Flags for CC and LD. 

##############################################################################
# COPT
#
# COPT is for options that the sophisticated builder might want to vary 
# from one build to the next, like options to build Postgres with debugging
# information included.  COPT is meant to be set on the make command line, 
# for example with the command "make COPT=-g".  The value you see set here
# is the default that gets used if the builder does not give a value for
# COPT on his make command.
#
# There is a nonobvious relationship between -O (optimization) and 
# -Werror (consider all warnings fatal).  On some systems, if you don't
# optimize, you will always get some warnings because the system header
# files will include some unreferenced functions in the code.  These are
# functions that are supposed to be inline, so there wouldn't ordinarily
# be an "unreferenced" problem, but if you don't enable optimization, no
# inlining can happen, and hence the problem.  Therefore, we include 
# if you override -O, you override -Werror as well.
#
# CUSTOM_COPT is something the user may set in Makefile.custom

# Common values for COPT are: -g for debuggable binaries, -m486 if you are
# using a i486 or better.

ifneq ($(CUSTOM_CC),)
  CC= $(CUSTOM_CC)
endif

ifneq ($(CUSTOM_COPT),)
  COPT= $(CUSTOM_COPT)
else
  ifeq ($(CC), gcc)
    COPT= -O2 -Werror
  else
    COPT= -O
  endif
endif


ifeq ($(CC), gcc)
# Some flags only gcc recognizes...
# PostgreSQL should *always* compile with these enabled
CFLAGS+= -Wall -Wmissing-prototypes
endif

# Globally pass debugging/optimization/profiling flags based
# on the options selected above.


ifdef COPT
   CFLAGS+= $(COPT)
else
   ifndef CFLAGS_OPT
      CFLAGS_OPT= -O
   endif
   CFLAGS+= $(CFLAGS_OPT)
endif

ifndef CASSERT
   CFLAGS+= -DNO_ASSERT_CHECKING
endif

ifdef PROFILE
   CFLAGS+= $(PROFILE)
   LDFLAGS+= $(PROFILE)
endif

# Globally pass PORTNAME
CFLAGS+= -D$(PORTNAME)

# include port-specific flags
CFLAGS+= $(CFLAGS_BE)
LD_ADD+= $(LDADD_BE)
LDFLAGS+= $(LDFLAGS_BE)

