CREATE TABLE vutest1 (a integer, b text);
INSERT INTO vutest1 VALUES (1, 'one');
INSERT INTO vutest1 VALUES (2, 'two');
-- simple view updatability conditions
CREATE VIEW vutestv1 AS SELECT a, b FROM vutest1;
NOTICE:  CREATE VIEW has created automatic view update rules
CREATE VIEW vutestv2 AS SELECT * FROM vutest1;
NOTICE:  CREATE VIEW has created automatic view update rules
CREATE VIEW vutestv3 AS SELECT b, a FROM vutest1;
NOTICE:  CREATE VIEW has created automatic view update rules
CREATE VIEW vutestv4 AS SELECT a, b FROM vutest1 WHERE a < 5;
NOTICE:  CREATE VIEW has created automatic view update rules
-- not updatable tests:
CREATE VIEW vutestv5 AS SELECT sum(a) FROM vutest1;  -- aggregate function
CREATE VIEW vutestv6 AS SELECT b FROM vutest1 GROUP BY b;  -- GROUP BY
CREATE VIEW vutestv7 AS SELECT l.b AS x, r.b AS y FROM vutest1 l, vutest1 r WHERE r.a = l.a;  -- JOIN
CREATE VIEW vutestv8 AS SELECT 42;  -- no table
CREATE VIEW vutestv9 AS SELECT a * 2 AS x, b || b AS y FROM vutest1;  -- derived columns
CREATE VIEW vutestv10 AS SELECT a AS x, a AS y FROM vutest1;  -- column referenced more than once
CREATE VIEW vutestv11 AS SELECT * FROM generate_series(1, 5);  -- table function
CREATE VIEW vutestv12 AS SELECT xmin, xmax, a, b FROM vutest1;  -- system columns
CREATE VIEW vutestv13 AS SELECT DISTINCT a, b FROM vutest1;  -- DISTINCT
CREATE VIEW vutestv14 AS SELECT a, b FROM vutest1 WHERE a > (SELECT avg(a) FROM vutest1);  -- *is* updatable, but SQL standard disallows this
NOTICE:  CREATE VIEW has created automatic view update rules
CREATE VIEW vutestv15 AS SELECT a, b FROM vutest1 UNION ALL SELECT a, b FROM vutest1;  -- UNION
CREATE VIEW vutestv16 AS SELECT x, y FROM (SELECT * FROM vutest1) AS foo (x, y);  -- subquery ("derived table"); SQL standard allows this
CREATE VIEW vutestv17 AS SELECT a, 5, b FROM vutest1;  -- constant
CREATE VIEW vutestv18 AS SELECT a, b FROM vutest1 LIMIT 1;  -- LIMIT
CREATE VIEW vutestv19 AS SELECT a, b FROM vutest1 OFFSET 1;  -- OFFSET
CREATE VIEW vutestv101 AS SELECT a, rank() OVER (PARTITION BY a ORDER BY b DESC) FROM vutest1;  -- window function
CREATE VIEW vutestv102 AS WITH foo AS (SELECT a, b FROM vutest1) SELECT * FROM foo;  -- SQL standard allows this
CREATE VIEW vutestv103 AS WITH RECURSIVE t(n) AS (SELECT 1 UNION ALL SELECT n+1 FROM t) SELECT a FROM vutest1;  -- recursive
INSERT INTO vutestv1 VALUES (3, 'three');
INSERT INTO vutestv2 VALUES (4, 'four');
INSERT INTO vutestv3 VALUES (5, 'five');  -- fail
ERROR:  invalid input syntax for integer: "five"
LINE 1: INSERT INTO vutestv3 VALUES (5, 'five');
                                        ^
INSERT INTO vutestv3 VALUES ('five', 5);
INSERT INTO vutestv3 (a, b) VALUES (6, 'six');
INSERT INTO vutestv4 VALUES (7, 'seven');  -- ok, but would be check option issue
INSERT INTO vutestv5 VALUES (8);  -- fail
ERROR:  view is not updatable
HINT:  You need an unconditional ON INSERT DO INSTEAD rule.
SELECT * FROM vutest1;
 a |   b   
---+-------
 1 | one
 2 | two
 3 | three
 4 | four
 5 | five
 6 | six
 7 | seven
(7 rows)

SELECT * FROM vutestv1;
 a |   b   
---+-------
 1 | one
 2 | two
 3 | three
 4 | four
 5 | five
 6 | six
 7 | seven
(7 rows)

SELECT * FROM vutestv2;
 a |   b   
---+-------
 1 | one
 2 | two
 3 | three
 4 | four
 5 | five
 6 | six
 7 | seven
(7 rows)

SELECT * FROM vutestv3;
   b   | a 
-------+---
 one   | 1
 two   | 2
 three | 3
 four  | 4
 five  | 5
 six   | 6
 seven | 7
(7 rows)

SELECT * FROM vutestv4;
 a |   b   
---+-------
 1 | one
 2 | two
 3 | three
 4 | four
(4 rows)

SELECT * FROM vutestv5;
 sum 
-----
  28
(1 row)

UPDATE vutestv1 SET b = 'a lot' WHERE a = 7;
DELETE FROM vutestv2 WHERE a = 1;
UPDATE vutestv4 SET b = b || '!' WHERE a > 1;
DELETE FROM vutestv4 WHERE a > 3;
UPDATE vutestv6 SET b = 37; -- fail
ERROR:  view is not updatable
HINT:  You need an unconditional ON UPDATE DO INSTEAD rule.
DELETE FROM vutestv5;  -- fail
ERROR:  view is not updatable
HINT:  You need an unconditional ON DELETE DO INSTEAD rule.
SELECT * FROM vutest1 ORDER BY a, b;
 a |   b    
---+--------
 2 | two!
 3 | three!
 5 | five
 6 | six
 7 | a lot
(5 rows)

SELECT * FROM vutestv1 ORDER BY a, b;
 a |   b    
---+--------
 2 | two!
 3 | three!
 5 | five
 6 | six
 7 | a lot
(5 rows)

SELECT * FROM vutestv2 ORDER BY a, b;
 a |   b    
---+--------
 2 | two!
 3 | three!
 5 | five
 6 | six
 7 | a lot
(5 rows)

SELECT * FROM vutestv4 ORDER BY a, b;
 a |   b    
---+--------
 2 | two!
 3 | three!
(2 rows)

TRUNCATE TABLE vutest1;
-- views on views
CREATE VIEW vutestv20 AS SELECT a AS x, b AS y FROM vutestv1;
NOTICE:  CREATE VIEW has created automatic view update rules
CREATE VIEW vutestv21 AS SELECT x AS a FROM vutestv20 WHERE x % 2 = 0;
NOTICE:  CREATE VIEW has created automatic view update rules
CREATE VIEW vutestv22 AS SELECT sum(a) FROM vutestv21;  -- not updatable
CREATE VIEW vutestv23 AS SELECT * FROM vutestv12;  -- not updatable
INSERT INTO vutestv20 (x, y) VALUES (1, 'one');
INSERT INTO vutestv20 (x, y) VALUES (3, 'three');
INSERT INTO vutestv21 VALUES (2);
SELECT * FROM vutest1;
 a |   b   
---+-------
 1 | one
 3 | three
 2 | 
(3 rows)

SELECT * FROM vutestv20;
 x |   y   
---+-------
 1 | one
 3 | three
 2 | 
(3 rows)

SELECT * FROM vutestv21;
 a 
---
 2
(1 row)

UPDATE vutestv20 SET y = 'eins' WHERE x = 1;
UPDATE vutestv21 SET a = 222;
SELECT * FROM vutest1;
  a  |   b   
-----+-------
   3 | three
   1 | eins
 222 | 
(3 rows)

SELECT * FROM vutestv20;
  x  |   y   
-----+-------
   3 | three
   1 | eins
 222 | 
(3 rows)

SELECT * FROM vutestv21;
  a  
-----
 222
(1 row)

DELETE FROM vutestv20 WHERE x = 3;
SELECT * FROM vutest1;
  a  |  b   
-----+------
   1 | eins
 222 | 
(2 rows)

SELECT * FROM vutestv20;
  x  |  y   
-----+------
   1 | eins
 222 | 
(2 rows)

SELECT * FROM vutestv21;
  a  
-----
 222
(1 row)

-- insert tests
CREATE TABLE vutest2 (a int PRIMARY KEY, b text NOT NULL, c text NOT NULL DEFAULT 'foo');
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "vutest2_pkey" for table "vutest2"
CREATE VIEW vutestv30 AS SELECT a, b, c FROM vutest2;
NOTICE:  CREATE VIEW has created automatic view update rules
CREATE VIEW vutestv31 AS SELECT a, b FROM vutest2;
NOTICE:  CREATE VIEW has created automatic view update rules
CREATE VIEW vutestv32 AS SELECT a, c FROM vutest2;
NOTICE:  CREATE VIEW has created automatic view update rules
INSERT INTO vutestv30 VALUES (1, 'one', 'eins');
INSERT INTO vutestv31 VALUES (2, 'two');
INSERT INTO vutestv32 VALUES (3, 'drei');  -- fail
ERROR:  null value in column "b" violates not-null constraint
UPDATE vutestv31 SET a = 22 WHERE a = 2;
UPDATE vutestv32 SET c = 'drei!' WHERE a = 3;
SELECT rulename, definition FROM pg_rules WHERE tablename LIKE 'vutestv%' ORDER BY tablename, rulename;
 rulename |                                                                                                                                                                              definition                                                                                                                                                                              
----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 _DELETE  | CREATE RULE "_DELETE" AS ON DELETE TO vutestv1 DO INSTEAD DELETE FROM vutest1 WHERE ((((old.a IS NULL) AND (vutest1.a IS NULL)) OR (old.a = vutest1.a)) AND (((old.b IS NULL) AND (vutest1.b IS NULL)) OR (old.b = vutest1.b))) RETURNING old.a, old.b;
 _INSERT  | CREATE RULE "_INSERT" AS ON INSERT TO vutestv1 DO INSTEAD INSERT INTO vutest1 (a, b) VALUES (new.a, new.b) RETURNING new.a, new.b;
 _UPDATE  | CREATE RULE "_UPDATE" AS ON UPDATE TO vutestv1 DO INSTEAD UPDATE vutest1 SET a = new.a, b = new.b WHERE ((((old.a IS NULL) AND (vutest1.a IS NULL)) OR (old.a = vutest1.a)) AND (((old.b IS NULL) AND (vutest1.b IS NULL)) OR (old.b = vutest1.b))) RETURNING new.a, new.b;
 _DELETE  | CREATE RULE "_DELETE" AS ON DELETE TO vutestv14 DO INSTEAD DELETE FROM vutest1 WHERE ((((old.a IS NULL) AND (vutest1.a IS NULL)) OR (old.a = vutest1.a)) AND (((old.b IS NULL) AND (vutest1.b IS NULL)) OR (old.b = vutest1.b))) RETURNING old.a, old.b;
 _INSERT  | CREATE RULE "_INSERT" AS ON INSERT TO vutestv14 DO INSTEAD INSERT INTO vutest1 (a, b) VALUES (new.a, new.b) RETURNING new.a, new.b;
 _UPDATE  | CREATE RULE "_UPDATE" AS ON UPDATE TO vutestv14 DO INSTEAD UPDATE vutest1 SET a = new.a, b = new.b WHERE ((((old.a IS NULL) AND (vutest1.a IS NULL)) OR (old.a = vutest1.a)) AND (((old.b IS NULL) AND (vutest1.b IS NULL)) OR (old.b = vutest1.b))) RETURNING new.a, new.b;
 _DELETE  | CREATE RULE "_DELETE" AS ON DELETE TO vutestv2 DO INSTEAD DELETE FROM vutest1 WHERE ((((old.a IS NULL) AND (vutest1.a IS NULL)) OR (old.a = vutest1.a)) AND (((old.b IS NULL) AND (vutest1.b IS NULL)) OR (old.b = vutest1.b))) RETURNING old.a, old.b;
 _INSERT  | CREATE RULE "_INSERT" AS ON INSERT TO vutestv2 DO INSTEAD INSERT INTO vutest1 (a, b) VALUES (new.a, new.b) RETURNING new.a, new.b;
 _UPDATE  | CREATE RULE "_UPDATE" AS ON UPDATE TO vutestv2 DO INSTEAD UPDATE vutest1 SET a = new.a, b = new.b WHERE ((((old.a IS NULL) AND (vutest1.a IS NULL)) OR (old.a = vutest1.a)) AND (((old.b IS NULL) AND (vutest1.b IS NULL)) OR (old.b = vutest1.b))) RETURNING new.a, new.b;
 _DELETE  | CREATE RULE "_DELETE" AS ON DELETE TO vutestv20 DO INSTEAD DELETE FROM vutestv1 WHERE ((((old.x IS NULL) AND (vutestv1.a IS NULL)) OR (old.x = vutestv1.a)) AND (((old.y IS NULL) AND (vutestv1.b IS NULL)) OR (old.y = vutestv1.b))) RETURNING old.x, old.y;
 _INSERT  | CREATE RULE "_INSERT" AS ON INSERT TO vutestv20 DO INSTEAD INSERT INTO vutestv1 (a, b) VALUES (new.x, new.y) RETURNING new.x AS a, new.y AS b;
 _UPDATE  | CREATE RULE "_UPDATE" AS ON UPDATE TO vutestv20 DO INSTEAD UPDATE vutestv1 SET a = new.x, b = new.y WHERE ((((old.x IS NULL) AND (vutestv1.a IS NULL)) OR (old.x = vutestv1.a)) AND (((old.y IS NULL) AND (vutestv1.b IS NULL)) OR (old.y = vutestv1.b))) RETURNING new.x AS a, new.y AS b;
 _DELETE  | CREATE RULE "_DELETE" AS ON DELETE TO vutestv21 DO INSTEAD DELETE FROM vutestv20 WHERE ((((old.a IS NULL) AND (vutestv20.x IS NULL)) OR (old.a = vutestv20.x))) RETURNING old.a;
 _INSERT  | CREATE RULE "_INSERT" AS ON INSERT TO vutestv21 DO INSTEAD INSERT INTO vutestv20 (x) VALUES (new.a) RETURNING new.a AS x;
 _UPDATE  | CREATE RULE "_UPDATE" AS ON UPDATE TO vutestv21 DO INSTEAD UPDATE vutestv20 SET x = new.a WHERE ((((old.a IS NULL) AND (vutestv20.x IS NULL)) OR (old.a = vutestv20.x))) RETURNING new.a AS x;
 _DELETE  | CREATE RULE "_DELETE" AS ON DELETE TO vutestv3 DO INSTEAD DELETE FROM vutest1 WHERE ((((old.b IS NULL) AND (vutest1.b IS NULL)) OR (old.b = vutest1.b)) AND (((old.a IS NULL) AND (vutest1.a IS NULL)) OR (old.a = vutest1.a))) RETURNING old.b, old.a;
 _INSERT  | CREATE RULE "_INSERT" AS ON INSERT TO vutestv3 DO INSTEAD INSERT INTO vutest1 (b, a) VALUES (new.b, new.a) RETURNING new.a AS b, new.b AS a;
 _UPDATE  | CREATE RULE "_UPDATE" AS ON UPDATE TO vutestv3 DO INSTEAD UPDATE vutest1 SET b = new.b, a = new.a WHERE ((((old.b IS NULL) AND (vutest1.b IS NULL)) OR (old.b = vutest1.b)) AND (((old.a IS NULL) AND (vutest1.a IS NULL)) OR (old.a = vutest1.a))) RETURNING new.a AS b, new.b AS a;
 _DELETE  | CREATE RULE "_DELETE" AS ON DELETE TO vutestv30 DO INSTEAD DELETE FROM vutest2 WHERE ((((old.a IS NULL) AND (vutest2.a IS NULL)) OR (old.a = vutest2.a)) AND (((old.b IS NULL) AND (vutest2.b IS NULL)) OR (old.b = vutest2.b) OR (((old.c IS NULL) AND (vutest2.c IS NULL)) OR (old.c = vutest2.c)))) RETURNING old.a, old.b, old.c;
 _INSERT  | CREATE RULE "_INSERT" AS ON INSERT TO vutestv30 DO INSTEAD INSERT INTO vutest2 (a, b, c) VALUES (new.a, new.b, new.c) RETURNING new.a, new.b, new.c;
 _UPDATE  | CREATE RULE "_UPDATE" AS ON UPDATE TO vutestv30 DO INSTEAD UPDATE vutest2 SET a = new.a, b = new.b, c = new.c WHERE ((((old.a IS NULL) AND (vutest2.a IS NULL)) OR (old.a = vutest2.a)) AND (((old.b IS NULL) AND (vutest2.b IS NULL)) OR (old.b = vutest2.b) OR (((old.c IS NULL) AND (vutest2.c IS NULL)) OR (old.c = vutest2.c)))) RETURNING new.a, new.b, new.c;
 _DELETE  | CREATE RULE "_DELETE" AS ON DELETE TO vutestv31 DO INSTEAD DELETE FROM vutest2 WHERE ((((old.a IS NULL) AND (vutest2.a IS NULL)) OR (old.a = vutest2.a)) AND (((old.b IS NULL) AND (vutest2.b IS NULL)) OR (old.b = vutest2.b))) RETURNING old.a, old.b;
 _INSERT  | CREATE RULE "_INSERT" AS ON INSERT TO vutestv31 DO INSTEAD INSERT INTO vutest2 (a, b) VALUES (new.a, new.b) RETURNING new.a, new.b;
 _UPDATE  | CREATE RULE "_UPDATE" AS ON UPDATE TO vutestv31 DO INSTEAD UPDATE vutest2 SET a = new.a, b = new.b WHERE ((((old.a IS NULL) AND (vutest2.a IS NULL)) OR (old.a = vutest2.a)) AND (((old.b IS NULL) AND (vutest2.b IS NULL)) OR (old.b = vutest2.b))) RETURNING new.a, new.b;
 _DELETE  | CREATE RULE "_DELETE" AS ON DELETE TO vutestv32 DO INSTEAD DELETE FROM vutest2 WHERE ((((old.a IS NULL) AND (vutest2.a IS NULL)) OR (old.a = vutest2.a)) AND (((old.c IS NULL) AND (vutest2.c IS NULL)) OR (old.c = vutest2.c))) RETURNING old.a, old.c;
 _INSERT  | CREATE RULE "_INSERT" AS ON INSERT TO vutestv32 DO INSTEAD INSERT INTO vutest2 (a, c) VALUES (new.a, new.c) RETURNING new.a, new.c;
 _UPDATE  | CREATE RULE "_UPDATE" AS ON UPDATE TO vutestv32 DO INSTEAD UPDATE vutest2 SET a = new.a, c = new.c WHERE ((((old.a IS NULL) AND (vutest2.a IS NULL)) OR (old.a = vutest2.a)) AND (((old.c IS NULL) AND (vutest2.c IS NULL)) OR (old.c = vutest2.c))) RETURNING new.a, new.c;
 _DELETE  | CREATE RULE "_DELETE" AS ON DELETE TO vutestv4 DO INSTEAD DELETE FROM vutest1 WHERE ((((old.a IS NULL) AND (vutest1.a IS NULL)) OR (old.a = vutest1.a)) AND (((old.b IS NULL) AND (vutest1.b IS NULL)) OR (old.b = vutest1.b))) RETURNING old.a, old.b;
 _INSERT  | CREATE RULE "_INSERT" AS ON INSERT TO vutestv4 DO INSTEAD INSERT INTO vutest1 (a, b) VALUES (new.a, new.b) RETURNING new.a, new.b;
 _UPDATE  | CREATE RULE "_UPDATE" AS ON UPDATE TO vutestv4 DO INSTEAD UPDATE vutest1 SET a = new.a, b = new.b WHERE ((((old.a IS NULL) AND (vutest1.a IS NULL)) OR (old.a = vutest1.a)) AND (((old.b IS NULL) AND (vutest1.b IS NULL)) OR (old.b = vutest1.b))) RETURNING new.a, new.b;
(30 rows)

-- interaction of manual and automatic rules, view replacement
CREATE VIEW vutestv40 AS SELECT a, b FROM vutest1;
NOTICE:  CREATE VIEW has created automatic view update rules
CREATE RULE zmy_update AS ON UPDATE TO vutestv40 DO INSTEAD DELETE FROM vutest1;  -- drops automatic _UPDATE rule
CREATE RULE "_INSERT" AS ON INSERT TO vutestv40 DO INSTEAD DELETE FROM vutest1;  -- replaces automatic _INSERT rule
CREATE RULE zmy_delete AS ON DELETE TO vutestv40 DO ALSO DELETE FROM vutest1;  -- leaves automatic _DELETE rule (because of ALSO)
CREATE VIEW vutestv41 AS SELECT a + 1 AS aa, b FROM vutest1;  -- not updatable
CREATE RULE "_UPDATE" AS ON UPDATE TO vutestv41 DO INSTEAD UPDATE vutest1 SET a = new.aa - 1, b = new.b WHERE a = old.aa - 1 AND b = old.b;
CREATE OR REPLACE VIEW vutestv41 AS SELECT a AS aa, b FROM vutest1;  -- *now* updatable, manual _UPDATE rule stays
WARNING:  automatic UPDATE rule not created because manually created UPDATE rule exists
HINT:  If you prefer to have the automatic rule, drop the manually created rule and run CREATE OR REPLACE VIEW again.
NOTICE:  CREATE VIEW has created automatic view update rules
CREATE VIEW vutestv42 AS SELECT a + 1 AS aa, b FROM vutest1;  -- not updatable
CREATE RULE zmy_update AS ON UPDATE TO vutestv42 DO INSTEAD UPDATE vutest1 SET a = new.aa - 1, b = new.b WHERE a = old.aa - 1 AND b = old.b;
CREATE OR REPLACE VIEW vutestv42 AS SELECT a AS aa, b FROM vutest1;  -- *now* updatable, zmy_update stays, no _UPDATE created
WARNING:  automatic UPDATE rule not created because manually created UPDATE rule exists
HINT:  If you prefer to have the automatic rule, drop the manually created rule and run CREATE OR REPLACE VIEW again.
NOTICE:  CREATE VIEW has created automatic view update rules
CREATE VIEW vutestv43 AS SELECT a AS aa, b FROM vutest1;  -- updatable
NOTICE:  CREATE VIEW has created automatic view update rules
CREATE RULE zmy_update AS ON UPDATE TO vutestv43 DO INSTEAD DELETE FROM vutest1;  -- drops automatic _UPDATE rule
CREATE OR REPLACE VIEW vutestv43 AS SELECT a + 1 AS aa, b FROM vutest1;  -- no longer updatable, automatic rules are deleted, manual rules kept
CREATE VIEW vutestv44 AS SELECT a, b FROM vutest1;  -- updatable
NOTICE:  CREATE VIEW has created automatic view update rules
CREATE RULE zmy_update AS ON UPDATE TO vutestv44 DO INSTEAD DELETE FROM vutest1;  -- drops automatic _UPDATE rule
CREATE OR REPLACE VIEW vutestv44 AS SELECT a, b FROM vutest2;  -- automatic update rules are updated, manual rules kept
WARNING:  automatic UPDATE rule not created because manually created UPDATE rule exists
HINT:  If you prefer to have the automatic rule, drop the manually created rule and run CREATE OR REPLACE VIEW again.
NOTICE:  CREATE VIEW has created automatic view update rules
SELECT rulename, definition FROM pg_rules WHERE tablename LIKE 'vutestv4_' ORDER BY tablename, rulename;
  rulename  |                                                                                                                         definition                                                                                                                          
------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 _DELETE    | CREATE RULE "_DELETE" AS ON DELETE TO vutestv40 DO INSTEAD DELETE FROM vutest1 WHERE ((((old.a IS NULL) AND (vutest1.a IS NULL)) OR (old.a = vutest1.a)) AND (((old.b IS NULL) AND (vutest1.b IS NULL)) OR (old.b = vutest1.b))) RETURNING old.a, old.b;
 _INSERT    | CREATE RULE "_INSERT" AS ON INSERT TO vutestv40 DO INSTEAD DELETE FROM vutest1;
 zmy_delete | CREATE RULE zmy_delete AS ON DELETE TO vutestv40 DO DELETE FROM vutest1;
 zmy_update | CREATE RULE zmy_update AS ON UPDATE TO vutestv40 DO INSTEAD DELETE FROM vutest1;
 _DELETE    | CREATE RULE "_DELETE" AS ON DELETE TO vutestv41 DO INSTEAD DELETE FROM vutest1 WHERE ((((old.aa IS NULL) AND (vutest1.a IS NULL)) OR (old.aa = vutest1.a)) AND (((old.b IS NULL) AND (vutest1.b IS NULL)) OR (old.b = vutest1.b))) RETURNING old.aa, old.b;
 _INSERT    | CREATE RULE "_INSERT" AS ON INSERT TO vutestv41 DO INSTEAD INSERT INTO vutest1 (a, b) VALUES (new.aa, new.b) RETURNING new.aa AS a, new.b;
 _UPDATE    | CREATE RULE "_UPDATE" AS ON UPDATE TO vutestv41 DO INSTEAD UPDATE vutest1 SET a = (new.aa - 1), b = new.b WHERE ((vutest1.a = (old.aa - 1)) AND (vutest1.b = old.b));
 _DELETE    | CREATE RULE "_DELETE" AS ON DELETE TO vutestv42 DO INSTEAD DELETE FROM vutest1 WHERE ((((old.aa IS NULL) AND (vutest1.a IS NULL)) OR (old.aa = vutest1.a)) AND (((old.b IS NULL) AND (vutest1.b IS NULL)) OR (old.b = vutest1.b))) RETURNING old.aa, old.b;
 _INSERT    | CREATE RULE "_INSERT" AS ON INSERT TO vutestv42 DO INSTEAD INSERT INTO vutest1 (a, b) VALUES (new.aa, new.b) RETURNING new.aa AS a, new.b;
 zmy_update | CREATE RULE zmy_update AS ON UPDATE TO vutestv42 DO INSTEAD UPDATE vutest1 SET a = (new.aa - 1), b = new.b WHERE ((vutest1.a = (old.aa - 1)) AND (vutest1.b = old.b));
 zmy_update | CREATE RULE zmy_update AS ON UPDATE TO vutestv43 DO INSTEAD DELETE FROM vutest1;
 _DELETE    | CREATE RULE "_DELETE" AS ON DELETE TO vutestv44 DO INSTEAD DELETE FROM vutest2 WHERE ((((old.a IS NULL) AND (vutest2.a IS NULL)) OR (old.a = vutest2.a)) AND (((old.b IS NULL) AND (vutest2.b IS NULL)) OR (old.b = vutest2.b))) RETURNING old.a, old.b;
 _INSERT    | CREATE RULE "_INSERT" AS ON INSERT TO vutestv44 DO INSTEAD INSERT INTO vutest2 (a, b) VALUES (new.a, new.b) RETURNING new.a, new.b;
 zmy_update | CREATE RULE zmy_update AS ON UPDATE TO vutestv44 DO INSTEAD DELETE FROM vutest1;
(14 rows)

-- ACL
CREATE USER regressuser1;
CREATE USER regressuser2;
GRANT SELECT, INSERT, UPDATE ON vutest1 TO regressuser1;
SET ROLE regressuser1;
CREATE VIEW vutestv50 AS SELECT a, b FROM vutest1;
NOTICE:  CREATE VIEW has created automatic view update rules
GRANT SELECT, UPDATE, DELETE ON vutestv50 TO regressuser2;
SELECT * FROM vutestv50;
  a  |  b   
-----+------
   1 | eins
 222 | 
(2 rows)

INSERT INTO vutestv50 VALUES (0, 'zero');
UPDATE vutestv50 SET a = 1;
UPDATE vutestv50 SET a = 2 WHERE a = 1;
DELETE FROM vutestv50;  -- ERROR
ERROR:  permission denied for relation vutest1
RESET ROLE;
SET ROLE regressuser2;
SELECT * FROM vutestv50;
 a |  b   
---+------
 2 | eins
 2 | 
 2 | zero
(3 rows)

INSERT INTO vutestv50 VALUES (0, 'zero');  -- ERROR
ERROR:  permission denied for relation vutestv50
UPDATE vutestv50 SET a = 1;
UPDATE vutestv50 SET a = 2 WHERE a = 1;
DELETE FROM vutestv50;  -- ERROR on vutest1
ERROR:  permission denied for relation vutest1
RESET ROLE;
DROP VIEW vutestv50;
REVOKE ALL PRIVILEGES ON vutest1 FROM regressuser1;
DROP USER regressuser1, regressuser2;
