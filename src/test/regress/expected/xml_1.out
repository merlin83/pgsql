CREATE TABLE xmltest (
    id int,
    data xml
);
INSERT INTO xmltest VALUES (1, '<value>one</value>');
ERROR:  no XML support in this installation
INSERT INTO xmltest VALUES (2, '<value>two</value>');
ERROR:  no XML support in this installation
INSERT INTO xmltest VALUES (3, '<wrong');
ERROR:  no XML support in this installation
SELECT * FROM xmltest;
 id | data 
----+------
(0 rows)

SELECT xmlcomment('test');
ERROR:  no XML support in this installation
SELECT xmlcomment('-test');
ERROR:  no XML support in this installation
SELECT xmlcomment('test-');
ERROR:  no XML support in this installation
SELECT xmlcomment('--test');
ERROR:  no XML support in this installation
SELECT xmlcomment('te st');
ERROR:  no XML support in this installation
SELECT xmlconcat(xmlcomment('hello'),
                 xmlelement(NAME qux, 'foo'),
                 xmlcomment('world'));
ERROR:  no XML support in this installation
SELECT xmlconcat('hello', 'you');
ERROR:  no XML support in this installation
SELECT xmlconcat(1, 2);
ERROR:  argument of XMLCONCAT must be type "xml", not type integer
SELECT xmlconcat('bad', '<syntax');
ERROR:  no XML support in this installation
SELECT xmlconcat('<foo/>', NULL, '<?xml version="1.1" standalone="no"?><bar/>');
ERROR:  no XML support in this installation
SELECT xmlconcat('<?xml version="1.1"?><foo/>', NULL, '<?xml version="1.1" standalone="no"?><bar/>');
ERROR:  no XML support in this installation
SELECT xmlelement(name element,
                  xmlattributes (1 as one, 'deuce' as two),
                  'content');
ERROR:  no XML support in this installation
SELECT xmlelement(name element,
                  xmlattributes ('unnamed and wrong'));
ERROR:  no XML support in this installation
SELECT xmlelement(name element, xmlelement(name nested, 'stuff'));
ERROR:  no XML support in this installation
SELECT xmlelement(name employee, xmlforest(name, age, salary as pay)) FROM emp;
ERROR:  no XML support in this installation
SELECT xmlelement(name duplicate, xmlattributes(1 as a, 2 as b, 3 as a));
ERROR:  no XML support in this installation
SELECT xmlelement(name num, 37);
ERROR:  no XML support in this installation
SELECT xmlelement(name foo, text 'bar');
ERROR:  no XML support in this installation
SELECT xmlelement(name foo, xml 'bar');
ERROR:  no XML support in this installation
SELECT xmlelement(name foo, text 'b<a/>r');
ERROR:  no XML support in this installation
SELECT xmlelement(name foo, xml 'b<a/>r');
ERROR:  no XML support in this installation
SELECT xmlelement(name foo, array[1, 2, 3]);
ERROR:  no XML support in this installation
SET xmlbinary TO base64;
SELECT xmlelement(name foo, bytea 'bar');
ERROR:  no XML support in this installation
SET xmlbinary TO hex;
SELECT xmlelement(name foo, bytea 'bar');
ERROR:  no XML support in this installation
SELECT xmlparse(content 'abc');
ERROR:  no XML support in this installation
SELECT xmlparse(content '<abc>x</abc>');
ERROR:  no XML support in this installation
SELECT xmlparse(document 'abc');
ERROR:  no XML support in this installation
SELECT xmlparse(document '<abc>x</abc>');
ERROR:  no XML support in this installation
SELECT xmlpi(name foo);
ERROR:  no XML support in this installation
SELECT xmlpi(name xmlstuff);
ERROR:  no XML support in this installation
SELECT xmlpi(name foo, 'bar');
ERROR:  no XML support in this installation
SELECT xmlpi(name foo, 'in?>valid');
ERROR:  no XML support in this installation
SELECT xmlpi(name foo, null);
ERROR:  no XML support in this installation
SELECT xmlpi(name xmlstuff, null);
ERROR:  no XML support in this installation
SELECT xmlpi(name foo, '   bar');
ERROR:  no XML support in this installation
SELECT xmlroot(xml '<foo/>', version no value, standalone no value);
ERROR:  no XML support in this installation
SELECT xmlroot(xml '<foo/>', version '2.0');
ERROR:  no XML support in this installation
SELECT xmlroot(xml '<foo/>', version no value, standalone yes);
ERROR:  no XML support in this installation
SELECT xmlroot(xml '<?xml version="1.1"?><foo/>', version no value, standalone yes);
ERROR:  no XML support in this installation
SELECT xmlroot(xmlroot(xml '<foo/>', version '1.0'), version '1.1', standalone no);
ERROR:  no XML support in this installation
SELECT xmlroot('<?xml version="1.1" standalone="yes"?><foo/>', version no value, standalone no);
ERROR:  no XML support in this installation
SELECT xmlroot('<?xml version="1.1" standalone="yes"?><foo/>', version no value, standalone no value);
ERROR:  no XML support in this installation
SELECT xmlroot('<?xml version="1.1" standalone="yes"?><foo/>', version no value);
ERROR:  no XML support in this installation
SELECT xmlroot (
  xmlelement (
    name gazonk,
    xmlattributes (
      'val' AS name,
      1 + 1 AS num
    ),
    xmlelement (
      NAME qux,
      'foo'
    )
  ),
  version '1.0',
  standalone yes
);
ERROR:  no XML support in this installation
SELECT xmlserialize(content data as character varying(20)) FROM xmltest;
 xmlserialize 
--------------
(0 rows)

SELECT xmlserialize(content 'good' as char(10));
ERROR:  no XML support in this installation
SELECT xmlserialize(document 'bad' as text);
ERROR:  no XML support in this installation
SELECT xml '<foo>bar</foo>' IS DOCUMENT;
ERROR:  no XML support in this installation
SELECT xml '<foo>bar</foo><bar>foo</bar>' IS DOCUMENT;
ERROR:  no XML support in this installation
SELECT xml '<abc/>' IS NOT DOCUMENT;
ERROR:  no XML support in this installation
SELECT xml 'abc' IS NOT DOCUMENT;
ERROR:  no XML support in this installation
SELECT '<>' IS NOT DOCUMENT;
ERROR:  no XML support in this installation
SELECT xmlagg(data) FROM xmltest;
 xmlagg 
--------
 
(1 row)

SELECT xmlagg(data) FROM xmltest WHERE id > 10;
 xmlagg 
--------
 
(1 row)

SELECT xmlelement(name employees, xmlagg(xmlelement(name name, name))) FROM emp;
ERROR:  no XML support in this installation
-- Check mapping SQL identifier to XML name
SELECT xmlpi(name ":::_xml_abc135.%-&_");
ERROR:  no XML support in this installation
SELECT xmlpi(name "123");
ERROR:  no XML support in this installation
PREPARE foo (xml) AS SELECT xmlconcat('<foo/>', $1);
ERROR:  no XML support in this installation
SET XML OPTION DOCUMENT;
EXECUTE foo ('<bar/>');
ERROR:  prepared statement "foo" does not exist
EXECUTE foo ('bad');
ERROR:  prepared statement "foo" does not exist
SET XML OPTION CONTENT;
EXECUTE foo ('<bar/>');
ERROR:  prepared statement "foo" does not exist
EXECUTE foo ('good');
ERROR:  prepared statement "foo" does not exist
-- Test backwards parsing
CREATE VIEW xmlview1 AS SELECT xmlcomment('test');
CREATE VIEW xmlview2 AS SELECT xmlconcat('hello', 'you');
ERROR:  no XML support in this installation
CREATE VIEW xmlview3 AS SELECT xmlelement(name element, xmlattributes (1 as ":one:", 'deuce' as two), 'content&');
ERROR:  no XML support in this installation
CREATE VIEW xmlview4 AS SELECT xmlelement(name employee, xmlforest(name, age, salary as pay)) FROM emp;
ERROR:  no XML support in this installation
CREATE VIEW xmlview5 AS SELECT xmlparse(content '<abc>x</abc>');
CREATE VIEW xmlview6 AS SELECT xmlpi(name foo, 'bar');
ERROR:  no XML support in this installation
CREATE VIEW xmlview7 AS SELECT xmlroot(xml '<foo/>', version no value, standalone yes);
ERROR:  no XML support in this installation
CREATE VIEW xmlview8 AS SELECT xmlserialize(content 'good' as char(10));
ERROR:  no XML support in this installation
CREATE VIEW xmlview9 AS SELECT xmlserialize(content 'good' as text);
ERROR:  no XML support in this installation
SELECT table_name, view_definition FROM information_schema.views WHERE table_name LIKE 'xmlview%';
 table_name |                                view_definition                                
------------+-------------------------------------------------------------------------------
 xmlview1   | SELECT xmlcomment('test'::text) AS xmlcomment;
 xmlview5   | SELECT XMLPARSE(CONTENT '<abc>x</abc>'::text STRIP WHITESPACE) AS "xmlparse";
(2 rows)

