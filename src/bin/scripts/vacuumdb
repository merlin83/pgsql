#!/bin/sh
#-------------------------------------------------------------------------
#
# vacuumdb--
#    vacuum a postgres database
#
#    This script runs psql with the "-c" option to vacuum
#    the requested database.
#
# Copyright (c) 1994, Regents of the University of California
#
#
# IDENTIFICATION
#    $Header: /home/rubik/work/pgcvs/CVSROOT/pgsql/src/bin/scripts/Attic/vacuumdb,v 1.8 2000-01-12 19:36:36 petere Exp $
#
#-------------------------------------------------------------------------

CMDNAME=`basename $0`

PSQLOPT=
verbose=
analyze=
table=
dbname=
alldb=

while [ $# -gt 0 ]
do
    case "$1" in
	--help|-\?)
		usage=t
                break
		;;
# options passed on to psql
	--host|-h)
		PSQLOPT="$PSQLOPT -h $2"
		shift;;
        -h*)
                PSQLOPT="$PSQLOPT $1"
                ;;
        --host=*)
                PSQLOPT="$PSQLOPT -h "`echo $1 | sed 's/^--host=//'`
                ;;
	--port|-p)
		PSQLOPT="$PSQLOPT -p $2"
		shift;;
        -p*)
                PSQLOPT="$PSQLOPT $1"
                ;;
        --port=*)
                PSQLOPT="$PSQLOPT -p "`echo $1 | sed 's/^--port=//'`
                ;;
	--user|--username|-U)
		PSQLOPT="$PSQLOPT -U '$2'"
		shift;;
        -U*)
                PSQLOPT="$PSQLOPT $1"
                ;;
        --user=*)
                PSQLOPT="$PSQLOPT -U "`echo $1 | sed 's/^--user=//'`
                ;;
        --username=*)
                PSQLOPT="$PSQLOPT -U "`echo $1 | sed 's/^--username=//'`
                ;;
	--password|-W)
		PSQLOPT="$PSQLOPT -W"
		;;
	--echo|-e)
		PSQLOPT="$PSQLOPT -e"
		;;
	--quiet|-q)
		PSQLOPT="$PSQLOPT -o /dev/null"
		;;
	--dbname|--database|-d)
		dbname="$2"
		shift;;
        -d*)
                dbname=`echo $1 | sed 's/^-d//'`
                ;;
        --dbname=*)
                dbname=`echo $1 | sed 's/^--dbname=//'`
                ;;
        --database=*)
                dbname=`echo $1 | sed 's/^--database=//'`
                ;;
# options converted into SQL command
	--analyze|-z)
		analyze="ANALYZE "
		;;
	--all|-a)
		alldb=Y
		;;
	--table|-t)
		table="$2"
		shift;;
        -t*)
                table=`echo $1 | sed 's/^-t//'`
                ;;
        --table=*)
                table=`echo $1 | sed 's/^--table=//'`
                ;;
	--verbose|-v)
		verbose="VERBOSE "
		;;

	-*)
		echo "$CMDNAME: unrecognized option: $1"
                echo "Try -? for help."
		exit 1
		;;
	*)
		dbname="$1"
		;;
    esac
    shift
done

if [ "$usage" ]; then	
	echo "Usage: $CMDNAME [options] [dbname]"
	echo ""
	echo "  -h, --host=HOSTNAME             Database server host"
	echo "  -p, --port=PORT                 Database server port"
	echo "  -U, --username=USERNAME         Username to connect as"
	echo "  -W, --password                  Prompt for password"
	echo "  -d, --dbname=DBNAME             Database to vacuum"
	echo "  -a, --all                       Vacuum all databases"
	echo "  -z, --analyze                   Update optimizer hints"
	echo "  -t, --table='TABLE[(columns)]'  Vacuum specific table only"
	echo "  -v, --verbose                   Write a lot of output"
#???	echo "  -e, --echo                      "
        echo "  -q, --quiet                     Don't write any output"
	exit 0
fi

if [ "$alldb" ]; then
        if [ "$dbname" -o "$table" ]; then
                echo "$CMDNAME: cannot vacuum all databases and a specific one at the same time"
                exit 1
        fi
	dbname="`psql $PSQLOPT -q -t -A -d template1 -c 'SELECT datname FROM pg_database'`"
fi

if [ -z "$dbname" ]; then
	echo "$CMDNAME: missing required argument database name"
        echo "Try -? for help."
	exit 1
fi

for db in $dbname
do
	psql $PSQLOPT -c "vacuum $verbose $analyze $table" -d $dbname
done

if [ $? -ne 0 ]; then
	echo "$CMDNAME: vacuum failed"
	exit 1
fi

exit 0
