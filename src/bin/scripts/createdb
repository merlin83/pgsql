#!/bin/sh
#-------------------------------------------------------------------------
#
# createdb--
#    create a postgres database
#
#    This program runs psql with the "-c" option to create
#    the requested database.
#
# Copyright (c) 1994, Regents of the University of California
#
#
# IDENTIFICATION
#    $Header: /home/rubik/work/pgcvs/CVSROOT/pgsql/src/bin/scripts/Attic/createdb,v 1.6 2000-01-12 19:36:36 petere Exp $
#
#-------------------------------------------------------------------------

CMDNAME=`basename $0`

MB=
PSQLOPT=
dbname=
dbcomment=
dbpath=

while [ $# -gt 0 ]
do
    case "$1" in
	--help|-\?)
		usage=t
                break
		;;
# options passed on to psql
	--host|-h)
		PSQLOPT="$PSQLOPT -h $2"
		shift;;
        -h*)
                PSQLOPT="$PSQLOPT $1"
                ;;
        --host=*)
                PSQLOPT="$PSQLOPT -h "`echo $1 | sed 's/^--host=//'`
                ;;
	--port|-p)
		PSQLOPT="$PSQLOPT -p $2"
		shift;;
        -p*)
                PSQLOPT="$PSQLOPT $1"
                ;;
        --port=*)
                PSQLOPT="$PSQLOPT -p "`echo $1 | sed 's/^--port=//'`
                ;;
	--user|--username|-U)
		PSQLOPT="$PSQLOPT -U '$2'"
		shift;;
        -U*)
                PSQLOPT="$PSQLOPT $1"
                ;;
        --user=*)
                PSQLOPT="$PSQLOPT -U "`echo $1 | sed 's/^--user=//'`
                ;;
        --username=*)
                PSQLOPT="$PSQLOPT -U "`echo $1 | sed 's/^--username=//'`
                ;;
	--password|-W)
		PSQLOPT="$PSQLOPT -W"
		;;
	--echo|-e)
		PSQLOPT="$PSQLOPT -e"
		;;
	--quiet|-q)
		PSQLOPT="$PSQLOPT -o /dev/null"
		;;
# options converted into SQL command
	--location|-D)
		dbpath="$2"
		shift;;
        -D*)
                dbpath=`echo $1 | sed 's/^-D//'`
                ;;
        --location=*)
                dbpath=`echo $1 | sed 's/^--location=//'`
                ;;
	--encoding|-E)
		MB=$2
		shift;;
        -E*)
                MB=`echo $1 | sed 's/^-E//'`
                ;;
        --encoding=*)
                MB=`echo $1 | sed 's/^--encoding=//'`
                ;;
	-*)
		echo "$CMDNAME: unrecognized option: $1"
                echo "Try -? for help."
		exit 1
		;;
	*)
		if [ -z "$dbname" ]; then
			dbname="$1"
		else
			dbcomment="$1"
		fi
		;;
    esac
    shift
done

if [ "$usage" ]; then
	echo "Usage: $CMDNAME [options] dbname [description]"
	echo ""
	echo "  -D, --location=PATH             Alternative place to store the database"
	echo "  -E, --encoding=ENCODING         Multibyte encoding for the database"
	echo "  -h, --host=HOSTNAME             Database server host"
	echo "  -p, --port=PORT                 Database server port"
	echo "  -U, --username=USERNAME         Username to connect as"
	echo "  -W, --password                  Prompt for password"
#???	echo "  -e,          --echo             "
        echo "  -q,          --quiet            Don't write any messages"
	exit 0
fi


if [ -n "$MB" ]
then
        mbcode=`pg_encoding "$MB"`
        if [ -z "$mbcode" ]
	then
		echo "$CMDNAME: \"$MB\" is not a valid encoding name"
		exit 1
	fi
fi

if [ -z "$dbname" ]; then
	echo "$CMDNAME: missing required argument database name"
        echo "Try -? for help."
	exit 1
fi


# escape the quotes
dbpath=`echo $dbpath | sed "s/'/\\\\\'/g"`
dbname=`echo $dbname | sed 's/\"/\\\"/g'`

withstring=
[ "$dbpath" ] &&     withstring="$withstring LOCATION = '$dbpath'"
[ "$MB" ] &&         withstring="$withstring ENCODING = '$MB'"
[ "$withstring" ] && withstring=" WITH$withstring"

psql $PSQLOPT -d template1 -c "CREATE DATABASE \"$dbname\"$withstring"
if [ $? -ne 0 ]; then
	echo "$CMDNAME: database creation failed"
	exit 1
fi

# Insert comment as well, if requested
[ -z "$dbcomment" ] && exit 0

dbcomment=`echo $dbcomment | sed "s/'/\\\\\'/g"`

psql $PSQLOPT -d template1 -c "COMMENT ON DATABASE \"$dbname\" IS '$dbcomment'"
if [ $? -ne 0 ]; then
	echo "$CMDNAME: comment creation failed (database was created)"
	exit 1
fi

exit 0
